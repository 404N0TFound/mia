<?php
namespace miasrv\coupon\trade;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface TCouponTradeServiceIf {
  /**
   * @param \miasrv\coupon\trade\TParamsQueryCouponForCheckout $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\trade\TResultQueryCouponForCheckout
   */
  public function queryCouponForCheckout(\miasrv\coupon\trade\TParamsQueryCouponForCheckout $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\trade\TParamsCheckoutCommonCoupon $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\trade\TResultCheckoutCommonCoupon
   */
  public function checkoutCommonCoupon(\miasrv\coupon\trade\TParamsCheckoutCommonCoupon $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\trade\TParamsPreUseCoupon $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\trade\TResultPreUseCoupon
   */
  public function preUseCoupon(\miasrv\coupon\trade\TParamsPreUseCoupon $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\trade\TParamsRollbackCoupon $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\trade\TResultRollbackCoupon
   */
  public function rollbackCoupon(\miasrv\coupon\trade\TParamsRollbackCoupon $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\trade\TParamsUseCoupon $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\trade\TResultUseCoupon
   */
  public function useCoupon(\miasrv\coupon\trade\TParamsUseCoupon $params, \miasrv\common\CommonParams $att);
}

class TCouponTradeServiceClient implements \miasrv\coupon\trade\TCouponTradeServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function queryCouponForCheckout(\miasrv\coupon\trade\TParamsQueryCouponForCheckout $params, \miasrv\common\CommonParams $att)
  {
    $this->send_queryCouponForCheckout($params, $att);
    return $this->recv_queryCouponForCheckout();
  }

  public function send_queryCouponForCheckout(\miasrv\coupon\trade\TParamsQueryCouponForCheckout $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\trade\TCouponTradeService_queryCouponForCheckout_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryCouponForCheckout', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryCouponForCheckout', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryCouponForCheckout()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\trade\TCouponTradeService_queryCouponForCheckout_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\trade\TCouponTradeService_queryCouponForCheckout_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("queryCouponForCheckout failed: unknown result");
  }

  public function checkoutCommonCoupon(\miasrv\coupon\trade\TParamsCheckoutCommonCoupon $params, \miasrv\common\CommonParams $att)
  {
    $this->send_checkoutCommonCoupon($params, $att);
    return $this->recv_checkoutCommonCoupon();
  }

  public function send_checkoutCommonCoupon(\miasrv\coupon\trade\TParamsCheckoutCommonCoupon $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\trade\TCouponTradeService_checkoutCommonCoupon_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'checkoutCommonCoupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('checkoutCommonCoupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_checkoutCommonCoupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\trade\TCouponTradeService_checkoutCommonCoupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\trade\TCouponTradeService_checkoutCommonCoupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("checkoutCommonCoupon failed: unknown result");
  }

  public function preUseCoupon(\miasrv\coupon\trade\TParamsPreUseCoupon $params, \miasrv\common\CommonParams $att)
  {
    $this->send_preUseCoupon($params, $att);
    return $this->recv_preUseCoupon();
  }

  public function send_preUseCoupon(\miasrv\coupon\trade\TParamsPreUseCoupon $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\trade\TCouponTradeService_preUseCoupon_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'preUseCoupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('preUseCoupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_preUseCoupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\trade\TCouponTradeService_preUseCoupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\trade\TCouponTradeService_preUseCoupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("preUseCoupon failed: unknown result");
  }

  public function rollbackCoupon(\miasrv\coupon\trade\TParamsRollbackCoupon $params, \miasrv\common\CommonParams $att)
  {
    $this->send_rollbackCoupon($params, $att);
    return $this->recv_rollbackCoupon();
  }

  public function send_rollbackCoupon(\miasrv\coupon\trade\TParamsRollbackCoupon $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\trade\TCouponTradeService_rollbackCoupon_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'rollbackCoupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('rollbackCoupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_rollbackCoupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\trade\TCouponTradeService_rollbackCoupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\trade\TCouponTradeService_rollbackCoupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("rollbackCoupon failed: unknown result");
  }

  public function useCoupon(\miasrv\coupon\trade\TParamsUseCoupon $params, \miasrv\common\CommonParams $att)
  {
    $this->send_useCoupon($params, $att);
    return $this->recv_useCoupon();
  }

  public function send_useCoupon(\miasrv\coupon\trade\TParamsUseCoupon $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\trade\TCouponTradeService_useCoupon_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'useCoupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('useCoupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_useCoupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\trade\TCouponTradeService_useCoupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\trade\TCouponTradeService_useCoupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("useCoupon failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class TCouponTradeService_queryCouponForCheckout_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\trade\TParamsQueryCouponForCheckout
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\trade\TParamsQueryCouponForCheckout',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponTradeService_queryCouponForCheckout_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\trade\TParamsQueryCouponForCheckout();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponTradeService_queryCouponForCheckout_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponTradeService_queryCouponForCheckout_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\trade\TResultQueryCouponForCheckout
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\trade\TResultQueryCouponForCheckout',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponTradeService_queryCouponForCheckout_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\trade\TResultQueryCouponForCheckout();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponTradeService_queryCouponForCheckout_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponTradeService_checkoutCommonCoupon_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\trade\TParamsCheckoutCommonCoupon
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\trade\TParamsCheckoutCommonCoupon',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponTradeService_checkoutCommonCoupon_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\trade\TParamsCheckoutCommonCoupon();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponTradeService_checkoutCommonCoupon_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponTradeService_checkoutCommonCoupon_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\trade\TResultCheckoutCommonCoupon
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\trade\TResultCheckoutCommonCoupon',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponTradeService_checkoutCommonCoupon_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\trade\TResultCheckoutCommonCoupon();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponTradeService_checkoutCommonCoupon_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponTradeService_preUseCoupon_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\trade\TParamsPreUseCoupon
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\trade\TParamsPreUseCoupon',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponTradeService_preUseCoupon_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\trade\TParamsPreUseCoupon();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponTradeService_preUseCoupon_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponTradeService_preUseCoupon_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\trade\TResultPreUseCoupon
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\trade\TResultPreUseCoupon',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponTradeService_preUseCoupon_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\trade\TResultPreUseCoupon();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponTradeService_preUseCoupon_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponTradeService_rollbackCoupon_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\trade\TParamsRollbackCoupon
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\trade\TParamsRollbackCoupon',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponTradeService_rollbackCoupon_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\trade\TParamsRollbackCoupon();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponTradeService_rollbackCoupon_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponTradeService_rollbackCoupon_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\trade\TResultRollbackCoupon
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\trade\TResultRollbackCoupon',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponTradeService_rollbackCoupon_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\trade\TResultRollbackCoupon();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponTradeService_rollbackCoupon_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponTradeService_useCoupon_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\trade\TParamsUseCoupon
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\trade\TParamsUseCoupon',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponTradeService_useCoupon_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\trade\TParamsUseCoupon();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponTradeService_useCoupon_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponTradeService_useCoupon_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\trade\TResultUseCoupon
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\trade\TResultUseCoupon',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponTradeService_useCoupon_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\trade\TResultUseCoupon();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponTradeService_useCoupon_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


