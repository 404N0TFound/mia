<?php
namespace miasrv\coupon\trade;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class TParamsPreUseCoupon {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var string
   */
  public $ckSuperiorOrderCode = null;
  /**
   * @var string[]
   */
  public $couponCodes = null;
  /**
   * @var string
   */
  public $opUser = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ckSuperiorOrderCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'couponCodes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'opUser',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['ckSuperiorOrderCode'])) {
        $this->ckSuperiorOrderCode = $vals['ckSuperiorOrderCode'];
      }
      if (isset($vals['couponCodes'])) {
        $this->couponCodes = $vals['couponCodes'];
      }
      if (isset($vals['opUser'])) {
        $this->opUser = $vals['opUser'];
      }
    }
  }

  public function getName() {
    return 'TParamsPreUseCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ckSuperiorOrderCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->couponCodes = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->couponCodes []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->opUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsPreUseCoupon');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ckSuperiorOrderCode !== null) {
      $xfer += $output->writeFieldBegin('ckSuperiorOrderCode', TType::STRING, 2);
      $xfer += $output->writeString($this->ckSuperiorOrderCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponCodes !== null) {
      if (!is_array($this->couponCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('couponCodes', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->couponCodes));
        {
          foreach ($this->couponCodes as $iter6)
          {
            $xfer += $output->writeString($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opUser !== null) {
      $xfer += $output->writeFieldBegin('opUser', TType::STRING, 4);
      $xfer += $output->writeString($this->opUser);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultPreUseCoupon {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
    }
  }

  public function getName() {
    return 'TResultPreUseCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultPreUseCoupon');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 2);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsRollbackCoupon {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var string
   */
  public $ckSuperiorOrderCode = null;
  /**
   * @var string[]
   */
  public $couponCodes = null;
  /**
   * @var string
   */
  public $opUser = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ckSuperiorOrderCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'couponCodes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'opUser',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['ckSuperiorOrderCode'])) {
        $this->ckSuperiorOrderCode = $vals['ckSuperiorOrderCode'];
      }
      if (isset($vals['couponCodes'])) {
        $this->couponCodes = $vals['couponCodes'];
      }
      if (isset($vals['opUser'])) {
        $this->opUser = $vals['opUser'];
      }
    }
  }

  public function getName() {
    return 'TParamsRollbackCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ckSuperiorOrderCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->couponCodes = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readString($elem12);
              $this->couponCodes []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->opUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsRollbackCoupon');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ckSuperiorOrderCode !== null) {
      $xfer += $output->writeFieldBegin('ckSuperiorOrderCode', TType::STRING, 2);
      $xfer += $output->writeString($this->ckSuperiorOrderCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponCodes !== null) {
      if (!is_array($this->couponCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('couponCodes', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->couponCodes));
        {
          foreach ($this->couponCodes as $iter13)
          {
            $xfer += $output->writeString($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opUser !== null) {
      $xfer += $output->writeFieldBegin('opUser', TType::STRING, 4);
      $xfer += $output->writeString($this->opUser);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultRollbackCoupon {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
    }
  }

  public function getName() {
    return 'TResultRollbackCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultRollbackCoupon');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 2);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsUseCoupon {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var \miasrv\coupon\trade\TCouponUseRecord[]
   */
  public $useRecords = null;
  /**
   * @var string
   */
  public $opUser = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'useRecords',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\trade\TCouponUseRecord',
            ),
          ),
        3 => array(
          'var' => 'opUser',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['useRecords'])) {
        $this->useRecords = $vals['useRecords'];
      }
      if (isset($vals['opUser'])) {
        $this->opUser = $vals['opUser'];
      }
    }
  }

  public function getName() {
    return 'TParamsUseCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->useRecords = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \miasrv\coupon\trade\TCouponUseRecord();
              $xfer += $elem19->read($input);
              $this->useRecords []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->opUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsUseCoupon');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useRecords !== null) {
      if (!is_array($this->useRecords)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('useRecords', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->useRecords));
        {
          foreach ($this->useRecords as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opUser !== null) {
      $xfer += $output->writeFieldBegin('opUser', TType::STRING, 3);
      $xfer += $output->writeString($this->opUser);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultUseCoupon {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
    }
  }

  public function getName() {
    return 'TResultUseCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultUseCoupon');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 2);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsQueryCouponForCheckout {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var \miasrv\coupon\trade\TContent
   */
  public $tContent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'tContent',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\trade\TContent',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['tContent'])) {
        $this->tContent = $vals['tContent'];
      }
    }
  }

  public function getName() {
    return 'TParamsQueryCouponForCheckout';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->tContent = new \miasrv\coupon\trade\TContent();
            $xfer += $this->tContent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsQueryCouponForCheckout');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tContent !== null) {
      if (!is_object($this->tContent)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tContent', TType::STRUCT, 2);
      $xfer += $this->tContent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultQueryCouponForCheckout {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var \miasrv\coupon\trade\TCoupon[]
   */
  public $couponList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'couponList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\trade\TCoupon',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['couponList'])) {
        $this->couponList = $vals['couponList'];
      }
    }
  }

  public function getName() {
    return 'TResultQueryCouponForCheckout';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->couponList = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \miasrv\coupon\trade\TCoupon();
              $xfer += $elem26->read($input);
              $this->couponList []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultQueryCouponForCheckout');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 2);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponList !== null) {
      if (!is_array($this->couponList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('couponList', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->couponList));
        {
          foreach ($this->couponList as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsCheckoutCommonCoupon {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\trade\TContent
   */
  public $tContent = null;
  /**
   * @var \miasrv\coupon\trade\TCheckoutCoupon
   */
  public $tCheckoutCoupon = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tContent',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\trade\TContent',
          ),
        2 => array(
          'var' => 'tCheckoutCoupon',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\trade\TCheckoutCoupon',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tContent'])) {
        $this->tContent = $vals['tContent'];
      }
      if (isset($vals['tCheckoutCoupon'])) {
        $this->tCheckoutCoupon = $vals['tCheckoutCoupon'];
      }
    }
  }

  public function getName() {
    return 'TParamsCheckoutCommonCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->tContent = new \miasrv\coupon\trade\TContent();
            $xfer += $this->tContent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->tCheckoutCoupon = new \miasrv\coupon\trade\TCheckoutCoupon();
            $xfer += $this->tCheckoutCoupon->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsCheckoutCommonCoupon');
    if ($this->tContent !== null) {
      if (!is_object($this->tContent)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tContent', TType::STRUCT, 1);
      $xfer += $this->tContent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tCheckoutCoupon !== null) {
      if (!is_object($this->tCheckoutCoupon)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tCheckoutCoupon', TType::STRUCT, 2);
      $xfer += $this->tCheckoutCoupon->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultCheckoutCommonCoupon {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var \miasrv\coupon\trade\TContent
   */
  public $resultInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'resultInfo',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\trade\TContent',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['resultInfo'])) {
        $this->resultInfo = $vals['resultInfo'];
      }
    }
  }

  public function getName() {
    return 'TResultCheckoutCommonCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->resultInfo = new \miasrv\coupon\trade\TContent();
            $xfer += $this->resultInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultCheckoutCommonCoupon');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 2);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resultInfo !== null) {
      if (!is_object($this->resultInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('resultInfo', TType::STRUCT, 5);
      $xfer += $this->resultInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCheckoutCoupon {
  static $_TSPEC;

  /**
   * @var int
   */
  public $shopId = 0;
  /**
   * @var string
   */
  public $couponCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'shopId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'couponCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['shopId'])) {
        $this->shopId = $vals['shopId'];
      }
      if (isset($vals['couponCode'])) {
        $this->couponCode = $vals['couponCode'];
      }
    }
  }

  public function getName() {
    return 'TCheckoutCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->shopId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->couponCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCheckoutCoupon');
    if ($this->shopId !== null) {
      $xfer += $output->writeFieldBegin('shopId', TType::I32, 1);
      $xfer += $output->writeI32($this->shopId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponCode !== null) {
      $xfer += $output->writeFieldBegin('couponCode', TType::STRING, 2);
      $xfer += $output->writeString($this->couponCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUseRecord {
  static $_TSPEC;

  /**
   * @var string
   */
  public $couponCode = "";
  /**
   * @var string
   */
  public $superiorOrderCode = "";
  /**
   * @var string
   */
  public $orderCode = "";
  /**
   * @var string
   */
  public $ckSuperiorOrderCode = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'couponCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'superiorOrderCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'orderCode',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ckSuperiorOrderCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['couponCode'])) {
        $this->couponCode = $vals['couponCode'];
      }
      if (isset($vals['superiorOrderCode'])) {
        $this->superiorOrderCode = $vals['superiorOrderCode'];
      }
      if (isset($vals['orderCode'])) {
        $this->orderCode = $vals['orderCode'];
      }
      if (isset($vals['ckSuperiorOrderCode'])) {
        $this->ckSuperiorOrderCode = $vals['ckSuperiorOrderCode'];
      }
    }
  }

  public function getName() {
    return 'TCouponUseRecord';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->couponCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->superiorOrderCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ckSuperiorOrderCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUseRecord');
    if ($this->couponCode !== null) {
      $xfer += $output->writeFieldBegin('couponCode', TType::STRING, 1);
      $xfer += $output->writeString($this->couponCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->superiorOrderCode !== null) {
      $xfer += $output->writeFieldBegin('superiorOrderCode', TType::STRING, 2);
      $xfer += $output->writeString($this->superiorOrderCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderCode !== null) {
      $xfer += $output->writeFieldBegin('orderCode', TType::STRING, 3);
      $xfer += $output->writeString($this->orderCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ckSuperiorOrderCode !== null) {
      $xfer += $output->writeFieldBegin('ckSuperiorOrderCode', TType::STRING, 4);
      $xfer += $output->writeString($this->ckSuperiorOrderCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TContent {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\trade\TOrders
   */
  public $orders = null;
  /**
   * @var \miasrv\coupon\trade\TOrderItem[]
   */
  public $orderItems = null;
  /**
   * @var \miasrv\coupon\trade\TCoupon[]
   */
  public $coupons = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orders',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\trade\TOrders',
          ),
        2 => array(
          'var' => 'orderItems',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\trade\TOrderItem',
            ),
          ),
        3 => array(
          'var' => 'coupons',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\trade\TCoupon',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orders'])) {
        $this->orders = $vals['orders'];
      }
      if (isset($vals['orderItems'])) {
        $this->orderItems = $vals['orderItems'];
      }
      if (isset($vals['coupons'])) {
        $this->coupons = $vals['coupons'];
      }
    }
  }

  public function getName() {
    return 'TContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->orders = new \miasrv\coupon\trade\TOrders();
            $xfer += $this->orders->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->orderItems = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new \miasrv\coupon\trade\TOrderItem();
              $xfer += $elem33->read($input);
              $this->orderItems []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->coupons = array();
            $_size34 = 0;
            $_etype37 = 0;
            $xfer += $input->readListBegin($_etype37, $_size34);
            for ($_i38 = 0; $_i38 < $_size34; ++$_i38)
            {
              $elem39 = null;
              $elem39 = new \miasrv\coupon\trade\TCoupon();
              $xfer += $elem39->read($input);
              $this->coupons []= $elem39;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TContent');
    if ($this->orders !== null) {
      if (!is_object($this->orders)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orders', TType::STRUCT, 1);
      $xfer += $this->orders->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderItems !== null) {
      if (!is_array($this->orderItems)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orderItems', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->orderItems));
        {
          foreach ($this->orderItems as $iter40)
          {
            $xfer += $iter40->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coupons !== null) {
      if (!is_array($this->coupons)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('coupons', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->coupons));
        {
          foreach ($this->coupons as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TOrders {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ckSuperiorOrderCode = null;
  /**
   * @var int
   */
  public $ckType = null;
  /**
   * @var string
   */
  public $channel = null;
  /**
   * @var string
   */
  public $subChannel = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $orderTime = null;
  /**
   * @var double
   */
  public $salePrice = null;
  /**
   * @var double
   */
  public $dealPrice = null;
  /**
   * @var double
   */
  public $shipPrice = null;
  /**
   * @var double
   */
  public $couponPrice = null;
  /**
   * @var double
   */
  public $cashCouponPrice = null;
  /**
   * @var double
   */
  public $totalRedbagPrice = null;
  /**
   * @var double
   */
  public $usedRedbagPrice = null;
  /**
   * @var double
   */
  public $balancePrice = null;
  /**
   * @var double
   */
  public $payPrice = null;
  /**
   * @var double
   */
  public $taxPrice = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ckSuperiorOrderCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ckType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'channel',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'subChannel',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'orderTime',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'salePrice',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'dealPrice',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'shipPrice',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'couponPrice',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'cashCouponPrice',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'totalRedbagPrice',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'usedRedbagPrice',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'balancePrice',
          'type' => TType::DOUBLE,
          ),
        15 => array(
          'var' => 'payPrice',
          'type' => TType::DOUBLE,
          ),
        16 => array(
          'var' => 'taxPrice',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ckSuperiorOrderCode'])) {
        $this->ckSuperiorOrderCode = $vals['ckSuperiorOrderCode'];
      }
      if (isset($vals['ckType'])) {
        $this->ckType = $vals['ckType'];
      }
      if (isset($vals['channel'])) {
        $this->channel = $vals['channel'];
      }
      if (isset($vals['subChannel'])) {
        $this->subChannel = $vals['subChannel'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['orderTime'])) {
        $this->orderTime = $vals['orderTime'];
      }
      if (isset($vals['salePrice'])) {
        $this->salePrice = $vals['salePrice'];
      }
      if (isset($vals['dealPrice'])) {
        $this->dealPrice = $vals['dealPrice'];
      }
      if (isset($vals['shipPrice'])) {
        $this->shipPrice = $vals['shipPrice'];
      }
      if (isset($vals['couponPrice'])) {
        $this->couponPrice = $vals['couponPrice'];
      }
      if (isset($vals['cashCouponPrice'])) {
        $this->cashCouponPrice = $vals['cashCouponPrice'];
      }
      if (isset($vals['totalRedbagPrice'])) {
        $this->totalRedbagPrice = $vals['totalRedbagPrice'];
      }
      if (isset($vals['usedRedbagPrice'])) {
        $this->usedRedbagPrice = $vals['usedRedbagPrice'];
      }
      if (isset($vals['balancePrice'])) {
        $this->balancePrice = $vals['balancePrice'];
      }
      if (isset($vals['payPrice'])) {
        $this->payPrice = $vals['payPrice'];
      }
      if (isset($vals['taxPrice'])) {
        $this->taxPrice = $vals['taxPrice'];
      }
    }
  }

  public function getName() {
    return 'TOrders';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ckSuperiorOrderCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ckType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subChannel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->salePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->dealPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->shipPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->couponPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cashCouponPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->totalRedbagPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->usedRedbagPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->balancePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->payPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->taxPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TOrders');
    if ($this->ckSuperiorOrderCode !== null) {
      $xfer += $output->writeFieldBegin('ckSuperiorOrderCode', TType::STRING, 1);
      $xfer += $output->writeString($this->ckSuperiorOrderCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ckType !== null) {
      $xfer += $output->writeFieldBegin('ckType', TType::I32, 2);
      $xfer += $output->writeI32($this->ckType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel !== null) {
      $xfer += $output->writeFieldBegin('channel', TType::STRING, 3);
      $xfer += $output->writeString($this->channel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subChannel !== null) {
      $xfer += $output->writeFieldBegin('subChannel', TType::STRING, 4);
      $xfer += $output->writeString($this->subChannel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 5);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderTime !== null) {
      $xfer += $output->writeFieldBegin('orderTime', TType::STRING, 6);
      $xfer += $output->writeString($this->orderTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salePrice !== null) {
      $xfer += $output->writeFieldBegin('salePrice', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->salePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dealPrice !== null) {
      $xfer += $output->writeFieldBegin('dealPrice', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->dealPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shipPrice !== null) {
      $xfer += $output->writeFieldBegin('shipPrice', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->shipPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponPrice !== null) {
      $xfer += $output->writeFieldBegin('couponPrice', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->couponPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cashCouponPrice !== null) {
      $xfer += $output->writeFieldBegin('cashCouponPrice', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->cashCouponPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalRedbagPrice !== null) {
      $xfer += $output->writeFieldBegin('totalRedbagPrice', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->totalRedbagPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usedRedbagPrice !== null) {
      $xfer += $output->writeFieldBegin('usedRedbagPrice', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->usedRedbagPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->balancePrice !== null) {
      $xfer += $output->writeFieldBegin('balancePrice', TType::DOUBLE, 14);
      $xfer += $output->writeDouble($this->balancePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payPrice !== null) {
      $xfer += $output->writeFieldBegin('payPrice', TType::DOUBLE, 15);
      $xfer += $output->writeDouble($this->payPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->taxPrice !== null) {
      $xfer += $output->writeFieldBegin('taxPrice', TType::DOUBLE, 16);
      $xfer += $output->writeDouble($this->taxPrice);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TOrderItem {
  static $_TSPEC;

  /**
   * @var string
   */
  public $uniqKey = null;
  /**
   * @var string
   */
  public $shopName = null;
  /**
   * @var int
   */
  public $shopId = null;
  /**
   * @var int
   */
  public $warehouseId = null;
  /**
   * @var int
   */
  public $warehouseType = null;
  /**
   * @var int
   */
  public $supplierId = null;
  /**
   * @var int
   */
  public $isSpu = null;
  /**
   * @var int
   */
  public $giftType = null;
  /**
   * @var int
   */
  public $itemId = null;
  /**
   * @var string
   */
  public $itemSize = null;
  /**
   * @var string
   */
  public $itemName = null;
  /**
   * @var double
   */
  public $itemSalePrice = null;
  /**
   * @var double
   */
  public $dealPrice = null;
  /**
   * @var double
   */
  public $shipPrice = null;
  /**
   * @var string
   */
  public $couponCode = null;
  /**
   * @var int
   */
  public $couponLimitType = null;
  /**
   * @var double
   */
  public $couponPrice = null;
  /**
   * @var double
   */
  public $cashCouponPrice = null;
  /**
   * @var double
   */
  public $redbagPrice = null;
  /**
   * @var double
   */
  public $balancePrice = null;
  /**
   * @var double
   */
  public $reducePrice = null;
  /**
   * @var double
   */
  public $taxPrice = null;
  /**
   * @var double
   */
  public $payPrice = null;
  /**
   * @var int
   */
  public $brandId = null;
  /**
   * @var int
   */
  public $categoryId = null;
  /**
   * @var int
   */
  public $parentCategoryId = null;
  /**
   * @var \miasrv\coupon\trade\TSpuSku[]
   */
  public $spuSkus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uniqKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'shopName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'shopId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'warehouseId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'warehouseType',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'supplierId',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'isSpu',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'giftType',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'itemId',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'itemSize',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'itemName',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'itemSalePrice',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'dealPrice',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'shipPrice',
          'type' => TType::DOUBLE,
          ),
        15 => array(
          'var' => 'couponCode',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'couponLimitType',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'couponPrice',
          'type' => TType::DOUBLE,
          ),
        18 => array(
          'var' => 'cashCouponPrice',
          'type' => TType::DOUBLE,
          ),
        19 => array(
          'var' => 'redbagPrice',
          'type' => TType::DOUBLE,
          ),
        20 => array(
          'var' => 'balancePrice',
          'type' => TType::DOUBLE,
          ),
        21 => array(
          'var' => 'reducePrice',
          'type' => TType::DOUBLE,
          ),
        22 => array(
          'var' => 'taxPrice',
          'type' => TType::DOUBLE,
          ),
        23 => array(
          'var' => 'payPrice',
          'type' => TType::DOUBLE,
          ),
        24 => array(
          'var' => 'brandId',
          'type' => TType::I32,
          ),
        25 => array(
          'var' => 'categoryId',
          'type' => TType::I32,
          ),
        26 => array(
          'var' => 'parentCategoryId',
          'type' => TType::I32,
          ),
        27 => array(
          'var' => 'spuSkus',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\trade\TSpuSku',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uniqKey'])) {
        $this->uniqKey = $vals['uniqKey'];
      }
      if (isset($vals['shopName'])) {
        $this->shopName = $vals['shopName'];
      }
      if (isset($vals['shopId'])) {
        $this->shopId = $vals['shopId'];
      }
      if (isset($vals['warehouseId'])) {
        $this->warehouseId = $vals['warehouseId'];
      }
      if (isset($vals['warehouseType'])) {
        $this->warehouseType = $vals['warehouseType'];
      }
      if (isset($vals['supplierId'])) {
        $this->supplierId = $vals['supplierId'];
      }
      if (isset($vals['isSpu'])) {
        $this->isSpu = $vals['isSpu'];
      }
      if (isset($vals['giftType'])) {
        $this->giftType = $vals['giftType'];
      }
      if (isset($vals['itemId'])) {
        $this->itemId = $vals['itemId'];
      }
      if (isset($vals['itemSize'])) {
        $this->itemSize = $vals['itemSize'];
      }
      if (isset($vals['itemName'])) {
        $this->itemName = $vals['itemName'];
      }
      if (isset($vals['itemSalePrice'])) {
        $this->itemSalePrice = $vals['itemSalePrice'];
      }
      if (isset($vals['dealPrice'])) {
        $this->dealPrice = $vals['dealPrice'];
      }
      if (isset($vals['shipPrice'])) {
        $this->shipPrice = $vals['shipPrice'];
      }
      if (isset($vals['couponCode'])) {
        $this->couponCode = $vals['couponCode'];
      }
      if (isset($vals['couponLimitType'])) {
        $this->couponLimitType = $vals['couponLimitType'];
      }
      if (isset($vals['couponPrice'])) {
        $this->couponPrice = $vals['couponPrice'];
      }
      if (isset($vals['cashCouponPrice'])) {
        $this->cashCouponPrice = $vals['cashCouponPrice'];
      }
      if (isset($vals['redbagPrice'])) {
        $this->redbagPrice = $vals['redbagPrice'];
      }
      if (isset($vals['balancePrice'])) {
        $this->balancePrice = $vals['balancePrice'];
      }
      if (isset($vals['reducePrice'])) {
        $this->reducePrice = $vals['reducePrice'];
      }
      if (isset($vals['taxPrice'])) {
        $this->taxPrice = $vals['taxPrice'];
      }
      if (isset($vals['payPrice'])) {
        $this->payPrice = $vals['payPrice'];
      }
      if (isset($vals['brandId'])) {
        $this->brandId = $vals['brandId'];
      }
      if (isset($vals['categoryId'])) {
        $this->categoryId = $vals['categoryId'];
      }
      if (isset($vals['parentCategoryId'])) {
        $this->parentCategoryId = $vals['parentCategoryId'];
      }
      if (isset($vals['spuSkus'])) {
        $this->spuSkus = $vals['spuSkus'];
      }
    }
  }

  public function getName() {
    return 'TOrderItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shopName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->shopId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->warehouseId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->warehouseType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->supplierId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isSpu);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->giftType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->itemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->itemSalePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->dealPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->shipPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->couponCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->couponLimitType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->couponPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cashCouponPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->redbagPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->balancePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->reducePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->taxPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->payPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->brandId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->categoryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parentCategoryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::LST) {
            $this->spuSkus = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $elem47 = new \miasrv\coupon\trade\TSpuSku();
              $xfer += $elem47->read($input);
              $this->spuSkus []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TOrderItem');
    if ($this->uniqKey !== null) {
      $xfer += $output->writeFieldBegin('uniqKey', TType::STRING, 1);
      $xfer += $output->writeString($this->uniqKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shopName !== null) {
      $xfer += $output->writeFieldBegin('shopName', TType::STRING, 2);
      $xfer += $output->writeString($this->shopName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shopId !== null) {
      $xfer += $output->writeFieldBegin('shopId', TType::I32, 3);
      $xfer += $output->writeI32($this->shopId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->warehouseId !== null) {
      $xfer += $output->writeFieldBegin('warehouseId', TType::I32, 4);
      $xfer += $output->writeI32($this->warehouseId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->warehouseType !== null) {
      $xfer += $output->writeFieldBegin('warehouseType', TType::I32, 5);
      $xfer += $output->writeI32($this->warehouseType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierId !== null) {
      $xfer += $output->writeFieldBegin('supplierId', TType::I32, 6);
      $xfer += $output->writeI32($this->supplierId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isSpu !== null) {
      $xfer += $output->writeFieldBegin('isSpu', TType::I32, 7);
      $xfer += $output->writeI32($this->isSpu);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->giftType !== null) {
      $xfer += $output->writeFieldBegin('giftType', TType::I32, 8);
      $xfer += $output->writeI32($this->giftType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemId !== null) {
      $xfer += $output->writeFieldBegin('itemId', TType::I32, 9);
      $xfer += $output->writeI32($this->itemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemSize !== null) {
      $xfer += $output->writeFieldBegin('itemSize', TType::STRING, 10);
      $xfer += $output->writeString($this->itemSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemName !== null) {
      $xfer += $output->writeFieldBegin('itemName', TType::STRING, 11);
      $xfer += $output->writeString($this->itemName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemSalePrice !== null) {
      $xfer += $output->writeFieldBegin('itemSalePrice', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->itemSalePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dealPrice !== null) {
      $xfer += $output->writeFieldBegin('dealPrice', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->dealPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shipPrice !== null) {
      $xfer += $output->writeFieldBegin('shipPrice', TType::DOUBLE, 14);
      $xfer += $output->writeDouble($this->shipPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponCode !== null) {
      $xfer += $output->writeFieldBegin('couponCode', TType::STRING, 15);
      $xfer += $output->writeString($this->couponCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponLimitType !== null) {
      $xfer += $output->writeFieldBegin('couponLimitType', TType::I32, 16);
      $xfer += $output->writeI32($this->couponLimitType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponPrice !== null) {
      $xfer += $output->writeFieldBegin('couponPrice', TType::DOUBLE, 17);
      $xfer += $output->writeDouble($this->couponPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cashCouponPrice !== null) {
      $xfer += $output->writeFieldBegin('cashCouponPrice', TType::DOUBLE, 18);
      $xfer += $output->writeDouble($this->cashCouponPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->redbagPrice !== null) {
      $xfer += $output->writeFieldBegin('redbagPrice', TType::DOUBLE, 19);
      $xfer += $output->writeDouble($this->redbagPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->balancePrice !== null) {
      $xfer += $output->writeFieldBegin('balancePrice', TType::DOUBLE, 20);
      $xfer += $output->writeDouble($this->balancePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reducePrice !== null) {
      $xfer += $output->writeFieldBegin('reducePrice', TType::DOUBLE, 21);
      $xfer += $output->writeDouble($this->reducePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->taxPrice !== null) {
      $xfer += $output->writeFieldBegin('taxPrice', TType::DOUBLE, 22);
      $xfer += $output->writeDouble($this->taxPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payPrice !== null) {
      $xfer += $output->writeFieldBegin('payPrice', TType::DOUBLE, 23);
      $xfer += $output->writeDouble($this->payPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->brandId !== null) {
      $xfer += $output->writeFieldBegin('brandId', TType::I32, 24);
      $xfer += $output->writeI32($this->brandId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->categoryId !== null) {
      $xfer += $output->writeFieldBegin('categoryId', TType::I32, 25);
      $xfer += $output->writeI32($this->categoryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parentCategoryId !== null) {
      $xfer += $output->writeFieldBegin('parentCategoryId', TType::I32, 26);
      $xfer += $output->writeI32($this->parentCategoryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spuSkus !== null) {
      if (!is_array($this->spuSkus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spuSkus', TType::LST, 27);
      {
        $output->writeListBegin(TType::STRUCT, count($this->spuSkus));
        {
          foreach ($this->spuSkus as $iter48)
          {
            $xfer += $iter48->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TSpuSku {
  static $_TSPEC;

  /**
   * @var string
   */
  public $uniqKey = null;
  /**
   * @var int
   */
  public $itemId = null;
  /**
   * @var string
   */
  public $itemSize = null;
  /**
   * @var string
   */
  public $itemName = null;
  /**
   * @var double
   */
  public $itemSalePrice = null;
  /**
   * @var double
   */
  public $dealPrice = null;
  /**
   * @var int
   */
  public $supplierId = null;
  /**
   * @var double
   */
  public $shipPrice = null;
  /**
   * @var double
   */
  public $cashCouponPrice = null;
  /**
   * @var double
   */
  public $couponPrice = null;
  /**
   * @var double
   */
  public $redbagPrice = null;
  /**
   * @var double
   */
  public $balancePrice = null;
  /**
   * @var double
   */
  public $reducePrice = null;
  /**
   * @var double
   */
  public $payPrice = null;
  /**
   * @var double
   */
  public $taxPrice = null;
  /**
   * @var int
   */
  public $brandId = null;
  /**
   * @var int
   */
  public $categoryId = null;
  /**
   * @var int
   */
  public $parentCategoryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uniqKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'itemId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'itemSize',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'itemName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'itemSalePrice',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'dealPrice',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'supplierId',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'shipPrice',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'cashCouponPrice',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'couponPrice',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'redbagPrice',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'balancePrice',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'reducePrice',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'payPrice',
          'type' => TType::DOUBLE,
          ),
        15 => array(
          'var' => 'taxPrice',
          'type' => TType::DOUBLE,
          ),
        16 => array(
          'var' => 'brandId',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'categoryId',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'parentCategoryId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uniqKey'])) {
        $this->uniqKey = $vals['uniqKey'];
      }
      if (isset($vals['itemId'])) {
        $this->itemId = $vals['itemId'];
      }
      if (isset($vals['itemSize'])) {
        $this->itemSize = $vals['itemSize'];
      }
      if (isset($vals['itemName'])) {
        $this->itemName = $vals['itemName'];
      }
      if (isset($vals['itemSalePrice'])) {
        $this->itemSalePrice = $vals['itemSalePrice'];
      }
      if (isset($vals['dealPrice'])) {
        $this->dealPrice = $vals['dealPrice'];
      }
      if (isset($vals['supplierId'])) {
        $this->supplierId = $vals['supplierId'];
      }
      if (isset($vals['shipPrice'])) {
        $this->shipPrice = $vals['shipPrice'];
      }
      if (isset($vals['cashCouponPrice'])) {
        $this->cashCouponPrice = $vals['cashCouponPrice'];
      }
      if (isset($vals['couponPrice'])) {
        $this->couponPrice = $vals['couponPrice'];
      }
      if (isset($vals['redbagPrice'])) {
        $this->redbagPrice = $vals['redbagPrice'];
      }
      if (isset($vals['balancePrice'])) {
        $this->balancePrice = $vals['balancePrice'];
      }
      if (isset($vals['reducePrice'])) {
        $this->reducePrice = $vals['reducePrice'];
      }
      if (isset($vals['payPrice'])) {
        $this->payPrice = $vals['payPrice'];
      }
      if (isset($vals['taxPrice'])) {
        $this->taxPrice = $vals['taxPrice'];
      }
      if (isset($vals['brandId'])) {
        $this->brandId = $vals['brandId'];
      }
      if (isset($vals['categoryId'])) {
        $this->categoryId = $vals['categoryId'];
      }
      if (isset($vals['parentCategoryId'])) {
        $this->parentCategoryId = $vals['parentCategoryId'];
      }
    }
  }

  public function getName() {
    return 'TSpuSku';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->itemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->itemSalePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->dealPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->supplierId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->shipPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cashCouponPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->couponPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->redbagPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->balancePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->reducePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->payPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->taxPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->brandId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->categoryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parentCategoryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TSpuSku');
    if ($this->uniqKey !== null) {
      $xfer += $output->writeFieldBegin('uniqKey', TType::STRING, 1);
      $xfer += $output->writeString($this->uniqKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemId !== null) {
      $xfer += $output->writeFieldBegin('itemId', TType::I32, 2);
      $xfer += $output->writeI32($this->itemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemSize !== null) {
      $xfer += $output->writeFieldBegin('itemSize', TType::STRING, 3);
      $xfer += $output->writeString($this->itemSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemName !== null) {
      $xfer += $output->writeFieldBegin('itemName', TType::STRING, 4);
      $xfer += $output->writeString($this->itemName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemSalePrice !== null) {
      $xfer += $output->writeFieldBegin('itemSalePrice', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->itemSalePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dealPrice !== null) {
      $xfer += $output->writeFieldBegin('dealPrice', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->dealPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierId !== null) {
      $xfer += $output->writeFieldBegin('supplierId', TType::I32, 7);
      $xfer += $output->writeI32($this->supplierId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shipPrice !== null) {
      $xfer += $output->writeFieldBegin('shipPrice', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->shipPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cashCouponPrice !== null) {
      $xfer += $output->writeFieldBegin('cashCouponPrice', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->cashCouponPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponPrice !== null) {
      $xfer += $output->writeFieldBegin('couponPrice', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->couponPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->redbagPrice !== null) {
      $xfer += $output->writeFieldBegin('redbagPrice', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->redbagPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->balancePrice !== null) {
      $xfer += $output->writeFieldBegin('balancePrice', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->balancePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reducePrice !== null) {
      $xfer += $output->writeFieldBegin('reducePrice', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->reducePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payPrice !== null) {
      $xfer += $output->writeFieldBegin('payPrice', TType::DOUBLE, 14);
      $xfer += $output->writeDouble($this->payPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->taxPrice !== null) {
      $xfer += $output->writeFieldBegin('taxPrice', TType::DOUBLE, 15);
      $xfer += $output->writeDouble($this->taxPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->brandId !== null) {
      $xfer += $output->writeFieldBegin('brandId', TType::I32, 16);
      $xfer += $output->writeI32($this->brandId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->categoryId !== null) {
      $xfer += $output->writeFieldBegin('categoryId', TType::I32, 17);
      $xfer += $output->writeI32($this->categoryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parentCategoryId !== null) {
      $xfer += $output->writeFieldBegin('parentCategoryId', TType::I32, 18);
      $xfer += $output->writeI32($this->parentCategoryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCoupon {
  static $_TSPEC;

  /**
   * @var string
   */
  public $couponCode = null;
  /**
   * @var double
   */
  public $value = null;
  /**
   * @var double
   */
  public $minPrice = null;
  /**
   * @var string
   */
  public $useRang = null;
  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $expireTime = null;
  /**
   * @var string
   */
  public $bindTime = null;
  /**
   * @var int
   */
  public $bindUserId = null;
  /**
   * @var int
   */
  public $timeValidType = null;
  /**
   * @var int
   */
  public $validDay = null;
  /**
   * @var int
   */
  public $businessType = null;
  /**
   * @var int
   */
  public $businessId = null;
  /**
   * @var int
   */
  public $isPassword = null;
  /**
   * @var string
   */
  public $password_code = null;
  /**
   * @var int
   */
  public $isUsable = null;
  /**
   * @var string
   */
  public $unuseableMsg = null;
  /**
   * @var int
   */
  public $leftUseNum = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var string
   */
  public $useStartTime = null;
  /**
   * @var string
   */
  public $useEndTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'couponCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'minPrice',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'useRang',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'startTime',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'expireTime',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'bindTime',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'bindUserId',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'timeValidType',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'validDay',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'businessType',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'businessId',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'isPassword',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'password_code',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'isUsable',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'unuseableMsg',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'leftUseNum',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'useStartTime',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'useEndTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['couponCode'])) {
        $this->couponCode = $vals['couponCode'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['minPrice'])) {
        $this->minPrice = $vals['minPrice'];
      }
      if (isset($vals['useRang'])) {
        $this->useRang = $vals['useRang'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['expireTime'])) {
        $this->expireTime = $vals['expireTime'];
      }
      if (isset($vals['bindTime'])) {
        $this->bindTime = $vals['bindTime'];
      }
      if (isset($vals['bindUserId'])) {
        $this->bindUserId = $vals['bindUserId'];
      }
      if (isset($vals['timeValidType'])) {
        $this->timeValidType = $vals['timeValidType'];
      }
      if (isset($vals['validDay'])) {
        $this->validDay = $vals['validDay'];
      }
      if (isset($vals['businessType'])) {
        $this->businessType = $vals['businessType'];
      }
      if (isset($vals['businessId'])) {
        $this->businessId = $vals['businessId'];
      }
      if (isset($vals['isPassword'])) {
        $this->isPassword = $vals['isPassword'];
      }
      if (isset($vals['password_code'])) {
        $this->password_code = $vals['password_code'];
      }
      if (isset($vals['isUsable'])) {
        $this->isUsable = $vals['isUsable'];
      }
      if (isset($vals['unuseableMsg'])) {
        $this->unuseableMsg = $vals['unuseableMsg'];
      }
      if (isset($vals['leftUseNum'])) {
        $this->leftUseNum = $vals['leftUseNum'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['useStartTime'])) {
        $this->useStartTime = $vals['useStartTime'];
      }
      if (isset($vals['useEndTime'])) {
        $this->useEndTime = $vals['useEndTime'];
      }
    }
  }

  public function getName() {
    return 'TCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->couponCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->minPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->useRang);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expireTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bindTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bindUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timeValidType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->validDay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->businessType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->businessId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isPassword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isUsable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->unuseableMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->leftUseNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->useStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->useEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCoupon');
    if ($this->couponCode !== null) {
      $xfer += $output->writeFieldBegin('couponCode', TType::STRING, 1);
      $xfer += $output->writeString($this->couponCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minPrice !== null) {
      $xfer += $output->writeFieldBegin('minPrice', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->minPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useRang !== null) {
      $xfer += $output->writeFieldBegin('useRang', TType::STRING, 4);
      $xfer += $output->writeString($this->useRang);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 5);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTime !== null) {
      $xfer += $output->writeFieldBegin('expireTime', TType::STRING, 6);
      $xfer += $output->writeString($this->expireTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bindTime !== null) {
      $xfer += $output->writeFieldBegin('bindTime', TType::STRING, 7);
      $xfer += $output->writeString($this->bindTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bindUserId !== null) {
      $xfer += $output->writeFieldBegin('bindUserId', TType::I32, 8);
      $xfer += $output->writeI32($this->bindUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeValidType !== null) {
      $xfer += $output->writeFieldBegin('timeValidType', TType::I32, 9);
      $xfer += $output->writeI32($this->timeValidType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validDay !== null) {
      $xfer += $output->writeFieldBegin('validDay', TType::I32, 10);
      $xfer += $output->writeI32($this->validDay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->businessType !== null) {
      $xfer += $output->writeFieldBegin('businessType', TType::I32, 11);
      $xfer += $output->writeI32($this->businessType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->businessId !== null) {
      $xfer += $output->writeFieldBegin('businessId', TType::I32, 12);
      $xfer += $output->writeI32($this->businessId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isPassword !== null) {
      $xfer += $output->writeFieldBegin('isPassword', TType::I32, 13);
      $xfer += $output->writeI32($this->isPassword);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password_code !== null) {
      $xfer += $output->writeFieldBegin('password_code', TType::STRING, 14);
      $xfer += $output->writeString($this->password_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isUsable !== null) {
      $xfer += $output->writeFieldBegin('isUsable', TType::I32, 15);
      $xfer += $output->writeI32($this->isUsable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unuseableMsg !== null) {
      $xfer += $output->writeFieldBegin('unuseableMsg', TType::STRING, 16);
      $xfer += $output->writeString($this->unuseableMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->leftUseNum !== null) {
      $xfer += $output->writeFieldBegin('leftUseNum', TType::I32, 17);
      $xfer += $output->writeI32($this->leftUseNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 18);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useStartTime !== null) {
      $xfer += $output->writeFieldBegin('useStartTime', TType::STRING, 19);
      $xfer += $output->writeString($this->useStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useEndTime !== null) {
      $xfer += $output->writeFieldBegin('useEndTime', TType::STRING, 20);
      $xfer += $output->writeString($this->useEndTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


