<?php
namespace miasrv\coupon\ums;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface TCouponUmsServiceIf {
  /**
   * @param \miasrv\coupon\ums\TParamsUnBindCoupon $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultUnBindCoupon
   */
  public function unBindCoupon(\miasrv\coupon\ums\TParamsUnBindCoupon $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\ums\TParamsGenCoupon $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultGenCoupon
   */
  public function genCoupon(\miasrv\coupon\ums\TParamsGenCoupon $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\ums\TParamsRecoverCoupon $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultRecoverCoupon
   */
  public function recoverCoupon(\miasrv\coupon\ums\TParamsRecoverCoupon $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\ums\TParamsDisableCoupon $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultDisableCoupon
   */
  public function disableCoupon(\miasrv\coupon\ums\TParamsDisableCoupon $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\ums\TParamsQueryCoupon $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultQueryCoupon
   */
  public function queryCoupon(\miasrv\coupon\ums\TParamsQueryCoupon $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\ums\TParamsQueryOrderCouponList $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultQueryOrderCouponList
   */
  public function queryOrderCouponList(\miasrv\coupon\ums\TParamsQueryOrderCouponList $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\ums\TParamsQueryCouponOrderList $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultQueryCouponOrderList
   */
  public function queryCouponOrderList(\miasrv\coupon\ums\TParamsQueryCouponOrderList $params, \miasrv\common\CommonParams $att);
  /**
   * 礼券列表
   *  
   * 
   * @param \miasrv\coupon\ums\TParamsQueryCouponList $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultQueryCouponList
   */
  public function queryCouponList(\miasrv\coupon\ums\TParamsQueryCouponList $params, \miasrv\common\CommonParams $att);
  /**
   * 批次列表
   *  
   * 
   * @param \miasrv\coupon\ums\TParamsQueryBatchInfoList $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultQueryBatchInfoList
   */
  public function queryBatchInfoList(\miasrv\coupon\ums\TParamsQueryBatchInfoList $params, \miasrv\common\CommonParams $att);
  /**
   * 品牌品类列表
   *  
   * 
   * @param \miasrv\coupon\ums\TParamsQueryBrandCategorys $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultQueryBrandCategorys
   */
  public function queryBrandCategorys(\miasrv\coupon\ums\TParamsQueryBrandCategorys $params, \miasrv\common\CommonParams $att);
  /**
   * 黑名单列表
   *  
   * 
   * @param \miasrv\coupon\ums\TParamsQueryExcludeSkus $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultQueryExcludeSkus
   */
  public function queryExcludeSkus(\miasrv\coupon\ums\TParamsQueryExcludeSkus $params, \miasrv\common\CommonParams $att);
  /**
   * 白名单列表
   *  
   * 
   * @param \miasrv\coupon\ums\TParamsQueryCouponSkus $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultQueryCouponSkus
   */
  public function queryCouponSkus(\miasrv\coupon\ums\TParamsQueryCouponSkus $params, \miasrv\common\CommonParams $att);
  /**
   * 供应商承担比例列表
   *  
   * 
   * @param \miasrv\coupon\ums\TParamsQuerySupplierPros $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultQuerySupplierPros
   */
  public function querySupplierPros(\miasrv\coupon\ums\TParamsQuerySupplierPros $params, \miasrv\common\CommonParams $att);
  /**
   * @param array $statModel
   * @param \miasrv\common\CommonParams $att
   * @return array
   */
  public function statGroup(array $statModel, \miasrv\common\CommonParams $att);
  /**
   * @param array $statModel
   * @param \miasrv\common\CommonParams $att
   * @return string
   */
  public function stat(array $statModel, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\ums\TParamsConsumeCoupon $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultConsumeCoupon
   */
  public function consumeCoupon(\miasrv\coupon\ums\TParamsConsumeCoupon $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\ums\TParamsQueryCouponUseRecord $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultQueryCouponUseRecord
   */
  public function queryCouponUseRecord(\miasrv\coupon\ums\TParamsQueryCouponUseRecord $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\ums\TParamsBindCouponByCode $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultBindCouponByCode
   */
  public function bindCouponByCode(\miasrv\coupon\ums\TParamsBindCouponByCode $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\ums\TParamsGetCouponBindAndUsedCount $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultGetCouponBindAndUsedCount
   */
  public function getCouponBindAndUsedCount(\miasrv\coupon\ums\TParamsGetCouponBindAndUsedCount $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\ums\TParamsGetCouponDayUsedCount $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultGetCouponDayUsedCount
   */
  public function getCouponDayUsedCount(\miasrv\coupon\ums\TParamsGetCouponDayUsedCount $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\ums\TParamsUpdatePromotionCouponStatus $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultUpdatePromotionCouponStatus
   */
  public function updatePromotionCouponStatus(\miasrv\coupon\ums\TParamsUpdatePromotionCouponStatus $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\ums\TParamsModifySupplierPro $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultModifySupplierPro
   */
  public function modifySupplierPro(\miasrv\coupon\ums\TParamsModifySupplierPro $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\ums\TParamsAddSupplierPro $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultAddSupplierPro
   */
  public function addSupplierPro(\miasrv\coupon\ums\TParamsAddSupplierPro $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\ums\TParamsDeleteSupplierPro $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\ums\TResultDeleteSupplierPro
   */
  public function deleteSupplierPro(\miasrv\coupon\ums\TParamsDeleteSupplierPro $params, \miasrv\common\CommonParams $att);
}

class TCouponUmsServiceClient implements \miasrv\coupon\ums\TCouponUmsServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function unBindCoupon(\miasrv\coupon\ums\TParamsUnBindCoupon $params, \miasrv\common\CommonParams $att)
  {
    $this->send_unBindCoupon($params, $att);
    return $this->recv_unBindCoupon();
  }

  public function send_unBindCoupon(\miasrv\coupon\ums\TParamsUnBindCoupon $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_unBindCoupon_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unBindCoupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unBindCoupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unBindCoupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_unBindCoupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_unBindCoupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("unBindCoupon failed: unknown result");
  }

  public function genCoupon(\miasrv\coupon\ums\TParamsGenCoupon $params, \miasrv\common\CommonParams $att)
  {
    $this->send_genCoupon($params, $att);
    return $this->recv_genCoupon();
  }

  public function send_genCoupon(\miasrv\coupon\ums\TParamsGenCoupon $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_genCoupon_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'genCoupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('genCoupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_genCoupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_genCoupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_genCoupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("genCoupon failed: unknown result");
  }

  public function recoverCoupon(\miasrv\coupon\ums\TParamsRecoverCoupon $params, \miasrv\common\CommonParams $att)
  {
    $this->send_recoverCoupon($params, $att);
    return $this->recv_recoverCoupon();
  }

  public function send_recoverCoupon(\miasrv\coupon\ums\TParamsRecoverCoupon $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_recoverCoupon_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'recoverCoupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('recoverCoupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_recoverCoupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_recoverCoupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_recoverCoupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("recoverCoupon failed: unknown result");
  }

  public function disableCoupon(\miasrv\coupon\ums\TParamsDisableCoupon $params, \miasrv\common\CommonParams $att)
  {
    $this->send_disableCoupon($params, $att);
    return $this->recv_disableCoupon();
  }

  public function send_disableCoupon(\miasrv\coupon\ums\TParamsDisableCoupon $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_disableCoupon_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'disableCoupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('disableCoupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_disableCoupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_disableCoupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_disableCoupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("disableCoupon failed: unknown result");
  }

  public function queryCoupon(\miasrv\coupon\ums\TParamsQueryCoupon $params, \miasrv\common\CommonParams $att)
  {
    $this->send_queryCoupon($params, $att);
    return $this->recv_queryCoupon();
  }

  public function send_queryCoupon(\miasrv\coupon\ums\TParamsQueryCoupon $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_queryCoupon_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryCoupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryCoupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryCoupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_queryCoupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_queryCoupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("queryCoupon failed: unknown result");
  }

  public function queryOrderCouponList(\miasrv\coupon\ums\TParamsQueryOrderCouponList $params, \miasrv\common\CommonParams $att)
  {
    $this->send_queryOrderCouponList($params, $att);
    return $this->recv_queryOrderCouponList();
  }

  public function send_queryOrderCouponList(\miasrv\coupon\ums\TParamsQueryOrderCouponList $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_queryOrderCouponList_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryOrderCouponList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryOrderCouponList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryOrderCouponList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_queryOrderCouponList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_queryOrderCouponList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("queryOrderCouponList failed: unknown result");
  }

  public function queryCouponOrderList(\miasrv\coupon\ums\TParamsQueryCouponOrderList $params, \miasrv\common\CommonParams $att)
  {
    $this->send_queryCouponOrderList($params, $att);
    return $this->recv_queryCouponOrderList();
  }

  public function send_queryCouponOrderList(\miasrv\coupon\ums\TParamsQueryCouponOrderList $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_queryCouponOrderList_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryCouponOrderList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryCouponOrderList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryCouponOrderList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_queryCouponOrderList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_queryCouponOrderList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("queryCouponOrderList failed: unknown result");
  }

  public function queryCouponList(\miasrv\coupon\ums\TParamsQueryCouponList $params, \miasrv\common\CommonParams $att)
  {
    $this->send_queryCouponList($params, $att);
    return $this->recv_queryCouponList();
  }

  public function send_queryCouponList(\miasrv\coupon\ums\TParamsQueryCouponList $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_queryCouponList_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryCouponList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryCouponList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryCouponList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_queryCouponList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_queryCouponList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("queryCouponList failed: unknown result");
  }

  public function queryBatchInfoList(\miasrv\coupon\ums\TParamsQueryBatchInfoList $params, \miasrv\common\CommonParams $att)
  {
    $this->send_queryBatchInfoList($params, $att);
    return $this->recv_queryBatchInfoList();
  }

  public function send_queryBatchInfoList(\miasrv\coupon\ums\TParamsQueryBatchInfoList $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_queryBatchInfoList_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryBatchInfoList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryBatchInfoList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryBatchInfoList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_queryBatchInfoList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_queryBatchInfoList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("queryBatchInfoList failed: unknown result");
  }

  public function queryBrandCategorys(\miasrv\coupon\ums\TParamsQueryBrandCategorys $params, \miasrv\common\CommonParams $att)
  {
    $this->send_queryBrandCategorys($params, $att);
    return $this->recv_queryBrandCategorys();
  }

  public function send_queryBrandCategorys(\miasrv\coupon\ums\TParamsQueryBrandCategorys $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_queryBrandCategorys_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryBrandCategorys', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryBrandCategorys', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryBrandCategorys()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_queryBrandCategorys_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_queryBrandCategorys_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("queryBrandCategorys failed: unknown result");
  }

  public function queryExcludeSkus(\miasrv\coupon\ums\TParamsQueryExcludeSkus $params, \miasrv\common\CommonParams $att)
  {
    $this->send_queryExcludeSkus($params, $att);
    return $this->recv_queryExcludeSkus();
  }

  public function send_queryExcludeSkus(\miasrv\coupon\ums\TParamsQueryExcludeSkus $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_queryExcludeSkus_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryExcludeSkus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryExcludeSkus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryExcludeSkus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_queryExcludeSkus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_queryExcludeSkus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("queryExcludeSkus failed: unknown result");
  }

  public function queryCouponSkus(\miasrv\coupon\ums\TParamsQueryCouponSkus $params, \miasrv\common\CommonParams $att)
  {
    $this->send_queryCouponSkus($params, $att);
    return $this->recv_queryCouponSkus();
  }

  public function send_queryCouponSkus(\miasrv\coupon\ums\TParamsQueryCouponSkus $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_queryCouponSkus_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryCouponSkus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryCouponSkus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryCouponSkus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_queryCouponSkus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_queryCouponSkus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("queryCouponSkus failed: unknown result");
  }

  public function querySupplierPros(\miasrv\coupon\ums\TParamsQuerySupplierPros $params, \miasrv\common\CommonParams $att)
  {
    $this->send_querySupplierPros($params, $att);
    return $this->recv_querySupplierPros();
  }

  public function send_querySupplierPros(\miasrv\coupon\ums\TParamsQuerySupplierPros $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_querySupplierPros_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'querySupplierPros', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('querySupplierPros', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_querySupplierPros()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_querySupplierPros_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_querySupplierPros_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("querySupplierPros failed: unknown result");
  }

  public function statGroup(array $statModel, \miasrv\common\CommonParams $att)
  {
    $this->send_statGroup($statModel, $att);
    return $this->recv_statGroup();
  }

  public function send_statGroup(array $statModel, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_statGroup_args();
    $args->statModel = $statModel;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'statGroup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('statGroup', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_statGroup()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_statGroup_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_statGroup_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("statGroup failed: unknown result");
  }

  public function stat(array $statModel, \miasrv\common\CommonParams $att)
  {
    $this->send_stat($statModel, $att);
    return $this->recv_stat();
  }

  public function send_stat(array $statModel, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_stat_args();
    $args->statModel = $statModel;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'stat', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('stat', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_stat()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_stat_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_stat_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("stat failed: unknown result");
  }

  public function consumeCoupon(\miasrv\coupon\ums\TParamsConsumeCoupon $params, \miasrv\common\CommonParams $att)
  {
    $this->send_consumeCoupon($params, $att);
    return $this->recv_consumeCoupon();
  }

  public function send_consumeCoupon(\miasrv\coupon\ums\TParamsConsumeCoupon $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_consumeCoupon_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'consumeCoupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('consumeCoupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_consumeCoupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_consumeCoupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_consumeCoupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("consumeCoupon failed: unknown result");
  }

  public function queryCouponUseRecord(\miasrv\coupon\ums\TParamsQueryCouponUseRecord $params, \miasrv\common\CommonParams $att)
  {
    $this->send_queryCouponUseRecord($params, $att);
    return $this->recv_queryCouponUseRecord();
  }

  public function send_queryCouponUseRecord(\miasrv\coupon\ums\TParamsQueryCouponUseRecord $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_queryCouponUseRecord_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryCouponUseRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryCouponUseRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryCouponUseRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_queryCouponUseRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_queryCouponUseRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("queryCouponUseRecord failed: unknown result");
  }

  public function bindCouponByCode(\miasrv\coupon\ums\TParamsBindCouponByCode $params, \miasrv\common\CommonParams $att)
  {
    $this->send_bindCouponByCode($params, $att);
    return $this->recv_bindCouponByCode();
  }

  public function send_bindCouponByCode(\miasrv\coupon\ums\TParamsBindCouponByCode $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_bindCouponByCode_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'bindCouponByCode', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('bindCouponByCode', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_bindCouponByCode()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_bindCouponByCode_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_bindCouponByCode_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("bindCouponByCode failed: unknown result");
  }

  public function getCouponBindAndUsedCount(\miasrv\coupon\ums\TParamsGetCouponBindAndUsedCount $params, \miasrv\common\CommonParams $att)
  {
    $this->send_getCouponBindAndUsedCount($params, $att);
    return $this->recv_getCouponBindAndUsedCount();
  }

  public function send_getCouponBindAndUsedCount(\miasrv\coupon\ums\TParamsGetCouponBindAndUsedCount $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_getCouponBindAndUsedCount_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCouponBindAndUsedCount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCouponBindAndUsedCount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCouponBindAndUsedCount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_getCouponBindAndUsedCount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_getCouponBindAndUsedCount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCouponBindAndUsedCount failed: unknown result");
  }

  public function getCouponDayUsedCount(\miasrv\coupon\ums\TParamsGetCouponDayUsedCount $params, \miasrv\common\CommonParams $att)
  {
    $this->send_getCouponDayUsedCount($params, $att);
    return $this->recv_getCouponDayUsedCount();
  }

  public function send_getCouponDayUsedCount(\miasrv\coupon\ums\TParamsGetCouponDayUsedCount $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_getCouponDayUsedCount_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCouponDayUsedCount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCouponDayUsedCount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCouponDayUsedCount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_getCouponDayUsedCount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_getCouponDayUsedCount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCouponDayUsedCount failed: unknown result");
  }

  public function updatePromotionCouponStatus(\miasrv\coupon\ums\TParamsUpdatePromotionCouponStatus $params, \miasrv\common\CommonParams $att)
  {
    $this->send_updatePromotionCouponStatus($params, $att);
    return $this->recv_updatePromotionCouponStatus();
  }

  public function send_updatePromotionCouponStatus(\miasrv\coupon\ums\TParamsUpdatePromotionCouponStatus $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_updatePromotionCouponStatus_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePromotionCouponStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePromotionCouponStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePromotionCouponStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_updatePromotionCouponStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_updatePromotionCouponStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePromotionCouponStatus failed: unknown result");
  }

  public function modifySupplierPro(\miasrv\coupon\ums\TParamsModifySupplierPro $params, \miasrv\common\CommonParams $att)
  {
    $this->send_modifySupplierPro($params, $att);
    return $this->recv_modifySupplierPro();
  }

  public function send_modifySupplierPro(\miasrv\coupon\ums\TParamsModifySupplierPro $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_modifySupplierPro_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'modifySupplierPro', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('modifySupplierPro', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_modifySupplierPro()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_modifySupplierPro_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_modifySupplierPro_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("modifySupplierPro failed: unknown result");
  }

  public function addSupplierPro(\miasrv\coupon\ums\TParamsAddSupplierPro $params, \miasrv\common\CommonParams $att)
  {
    $this->send_addSupplierPro($params, $att);
    return $this->recv_addSupplierPro();
  }

  public function send_addSupplierPro(\miasrv\coupon\ums\TParamsAddSupplierPro $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_addSupplierPro_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addSupplierPro', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addSupplierPro', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addSupplierPro()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_addSupplierPro_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_addSupplierPro_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addSupplierPro failed: unknown result");
  }

  public function deleteSupplierPro(\miasrv\coupon\ums\TParamsDeleteSupplierPro $params, \miasrv\common\CommonParams $att)
  {
    $this->send_deleteSupplierPro($params, $att);
    return $this->recv_deleteSupplierPro();
  }

  public function send_deleteSupplierPro(\miasrv\coupon\ums\TParamsDeleteSupplierPro $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\ums\TCouponUmsService_deleteSupplierPro_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteSupplierPro', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteSupplierPro', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteSupplierPro()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\ums\TCouponUmsService_deleteSupplierPro_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\ums\TCouponUmsService_deleteSupplierPro_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteSupplierPro failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class TCouponUmsService_unBindCoupon_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsUnBindCoupon
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsUnBindCoupon',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_unBindCoupon_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsUnBindCoupon();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_unBindCoupon_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_unBindCoupon_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultUnBindCoupon
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultUnBindCoupon',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_unBindCoupon_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultUnBindCoupon();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_unBindCoupon_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_genCoupon_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsGenCoupon
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsGenCoupon',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_genCoupon_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsGenCoupon();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_genCoupon_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_genCoupon_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultGenCoupon
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultGenCoupon',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_genCoupon_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultGenCoupon();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_genCoupon_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_recoverCoupon_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsRecoverCoupon
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsRecoverCoupon',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_recoverCoupon_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsRecoverCoupon();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_recoverCoupon_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_recoverCoupon_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultRecoverCoupon
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultRecoverCoupon',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_recoverCoupon_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultRecoverCoupon();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_recoverCoupon_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_disableCoupon_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsDisableCoupon
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsDisableCoupon',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_disableCoupon_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsDisableCoupon();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_disableCoupon_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_disableCoupon_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultDisableCoupon
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultDisableCoupon',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_disableCoupon_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultDisableCoupon();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_disableCoupon_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_queryCoupon_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsQueryCoupon
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsQueryCoupon',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_queryCoupon_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsQueryCoupon();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_queryCoupon_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_queryCoupon_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultQueryCoupon
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultQueryCoupon',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_queryCoupon_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultQueryCoupon();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_queryCoupon_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_queryOrderCouponList_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsQueryOrderCouponList
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsQueryOrderCouponList',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_queryOrderCouponList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsQueryOrderCouponList();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_queryOrderCouponList_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_queryOrderCouponList_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultQueryOrderCouponList
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultQueryOrderCouponList',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_queryOrderCouponList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultQueryOrderCouponList();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_queryOrderCouponList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_queryCouponOrderList_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsQueryCouponOrderList
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsQueryCouponOrderList',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_queryCouponOrderList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsQueryCouponOrderList();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_queryCouponOrderList_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_queryCouponOrderList_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultQueryCouponOrderList
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultQueryCouponOrderList',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_queryCouponOrderList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultQueryCouponOrderList();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_queryCouponOrderList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_queryCouponList_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsQueryCouponList
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsQueryCouponList',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_queryCouponList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsQueryCouponList();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_queryCouponList_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_queryCouponList_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultQueryCouponList
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultQueryCouponList',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_queryCouponList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultQueryCouponList();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_queryCouponList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_queryBatchInfoList_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsQueryBatchInfoList
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsQueryBatchInfoList',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_queryBatchInfoList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsQueryBatchInfoList();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_queryBatchInfoList_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_queryBatchInfoList_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultQueryBatchInfoList
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultQueryBatchInfoList',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_queryBatchInfoList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultQueryBatchInfoList();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_queryBatchInfoList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_queryBrandCategorys_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsQueryBrandCategorys
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsQueryBrandCategorys',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_queryBrandCategorys_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsQueryBrandCategorys();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_queryBrandCategorys_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_queryBrandCategorys_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultQueryBrandCategorys
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultQueryBrandCategorys',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_queryBrandCategorys_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultQueryBrandCategorys();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_queryBrandCategorys_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_queryExcludeSkus_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsQueryExcludeSkus
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsQueryExcludeSkus',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_queryExcludeSkus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsQueryExcludeSkus();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_queryExcludeSkus_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_queryExcludeSkus_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultQueryExcludeSkus
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultQueryExcludeSkus',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_queryExcludeSkus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultQueryExcludeSkus();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_queryExcludeSkus_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_queryCouponSkus_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsQueryCouponSkus
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsQueryCouponSkus',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_queryCouponSkus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsQueryCouponSkus();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_queryCouponSkus_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_queryCouponSkus_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultQueryCouponSkus
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultQueryCouponSkus',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_queryCouponSkus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultQueryCouponSkus();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_queryCouponSkus_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_querySupplierPros_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsQuerySupplierPros
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsQuerySupplierPros',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_querySupplierPros_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsQuerySupplierPros();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_querySupplierPros_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_querySupplierPros_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultQuerySupplierPros
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultQuerySupplierPros',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_querySupplierPros_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultQuerySupplierPros();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_querySupplierPros_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_statGroup_args {
  static $_TSPEC;

  /**
   * @var array
   */
  public $statModel = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'statModel',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['statModel'])) {
        $this->statModel = $vals['statModel'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_statGroup_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->statModel = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = '';
              $val6 = '';
              $xfer += $input->readString($key5);
              $xfer += $input->readString($val6);
              $this->statModel[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_statGroup_args');
    if ($this->statModel !== null) {
      if (!is_array($this->statModel)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('statModel', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->statModel));
        {
          foreach ($this->statModel as $kiter7 => $viter8)
          {
            $xfer += $output->writeString($kiter7);
            $xfer += $output->writeString($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_statGroup_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_statGroup_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size9 = 0;
            $_ktype10 = 0;
            $_vtype11 = 0;
            $xfer += $input->readMapBegin($_ktype10, $_vtype11, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $key14 = '';
              $val15 = '';
              $xfer += $input->readString($key14);
              $xfer += $input->readString($val15);
              $this->success[$key14] = $val15;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_statGroup_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter16 => $viter17)
          {
            $xfer += $output->writeString($kiter16);
            $xfer += $output->writeString($viter17);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_stat_args {
  static $_TSPEC;

  /**
   * @var array
   */
  public $statModel = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'statModel',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['statModel'])) {
        $this->statModel = $vals['statModel'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_stat_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->statModel = array();
            $_size18 = 0;
            $_ktype19 = 0;
            $_vtype20 = 0;
            $xfer += $input->readMapBegin($_ktype19, $_vtype20, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $key23 = '';
              $val24 = '';
              $xfer += $input->readString($key23);
              $xfer += $input->readString($val24);
              $this->statModel[$key23] = $val24;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_stat_args');
    if ($this->statModel !== null) {
      if (!is_array($this->statModel)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('statModel', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->statModel));
        {
          foreach ($this->statModel as $kiter25 => $viter26)
          {
            $xfer += $output->writeString($kiter25);
            $xfer += $output->writeString($viter26);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_stat_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_stat_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_stat_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_consumeCoupon_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsConsumeCoupon
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsConsumeCoupon',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_consumeCoupon_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsConsumeCoupon();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_consumeCoupon_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_consumeCoupon_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultConsumeCoupon
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultConsumeCoupon',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_consumeCoupon_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultConsumeCoupon();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_consumeCoupon_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_queryCouponUseRecord_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsQueryCouponUseRecord
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsQueryCouponUseRecord',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_queryCouponUseRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsQueryCouponUseRecord();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_queryCouponUseRecord_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_queryCouponUseRecord_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultQueryCouponUseRecord
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultQueryCouponUseRecord',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_queryCouponUseRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultQueryCouponUseRecord();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_queryCouponUseRecord_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_bindCouponByCode_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsBindCouponByCode
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsBindCouponByCode',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_bindCouponByCode_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsBindCouponByCode();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_bindCouponByCode_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_bindCouponByCode_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultBindCouponByCode
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultBindCouponByCode',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_bindCouponByCode_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultBindCouponByCode();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_bindCouponByCode_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_getCouponBindAndUsedCount_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsGetCouponBindAndUsedCount
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsGetCouponBindAndUsedCount',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_getCouponBindAndUsedCount_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsGetCouponBindAndUsedCount();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_getCouponBindAndUsedCount_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_getCouponBindAndUsedCount_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultGetCouponBindAndUsedCount
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultGetCouponBindAndUsedCount',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_getCouponBindAndUsedCount_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultGetCouponBindAndUsedCount();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_getCouponBindAndUsedCount_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_getCouponDayUsedCount_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsGetCouponDayUsedCount
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsGetCouponDayUsedCount',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_getCouponDayUsedCount_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsGetCouponDayUsedCount();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_getCouponDayUsedCount_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_getCouponDayUsedCount_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultGetCouponDayUsedCount
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultGetCouponDayUsedCount',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_getCouponDayUsedCount_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultGetCouponDayUsedCount();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_getCouponDayUsedCount_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_updatePromotionCouponStatus_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsUpdatePromotionCouponStatus
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsUpdatePromotionCouponStatus',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_updatePromotionCouponStatus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsUpdatePromotionCouponStatus();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_updatePromotionCouponStatus_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_updatePromotionCouponStatus_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultUpdatePromotionCouponStatus
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultUpdatePromotionCouponStatus',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_updatePromotionCouponStatus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultUpdatePromotionCouponStatus();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_updatePromotionCouponStatus_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_modifySupplierPro_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsModifySupplierPro
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsModifySupplierPro',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_modifySupplierPro_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsModifySupplierPro();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_modifySupplierPro_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_modifySupplierPro_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultModifySupplierPro
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultModifySupplierPro',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_modifySupplierPro_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultModifySupplierPro();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_modifySupplierPro_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_addSupplierPro_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsAddSupplierPro
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsAddSupplierPro',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_addSupplierPro_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsAddSupplierPro();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_addSupplierPro_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_addSupplierPro_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultAddSupplierPro
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultAddSupplierPro',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_addSupplierPro_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultAddSupplierPro();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_addSupplierPro_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_deleteSupplierPro_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TParamsDeleteSupplierPro
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TParamsDeleteSupplierPro',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_deleteSupplierPro_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\ums\TParamsDeleteSupplierPro();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_deleteSupplierPro_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUmsService_deleteSupplierPro_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TResultDeleteSupplierPro
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TResultDeleteSupplierPro',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponUmsService_deleteSupplierPro_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\ums\TResultDeleteSupplierPro();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUmsService_deleteSupplierPro_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


