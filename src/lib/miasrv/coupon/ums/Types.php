<?php
namespace miasrv\coupon\ums;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class TCouponBatchInfo {
  static $_TSPEC;

  /**
   * @var string
   */
  public $batchCode = null;
  /**
   * @var int
   */
  public $applyId = null;
  /**
   * @var double
   */
  public $value = null;
  /**
   * @var double
   */
  public $minPrice = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $useNum = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $generateAmount = null;
  /**
   * @var string
   */
  public $useRang = null;
  /**
   * @var int
   */
  public $businessType = null;
  /**
   * @var int
   */
  public $businessId = null;
  /**
   * @var int
   */
  public $couponStatus = null;
  /**
   * @var string
   */
  public $insertDate = null;
  /**
   * @var bool
   */
  public $isPassword = null;
  /**
   * @var string
   */
  public $passwordCode = null;
  /**
   * @var int
   */
  public $timeValidType = null;
  /**
   * @var int
   */
  public $validDay = null;
  /**
   * @var string
   */
  public $startTimestamp = null;
  /**
   * @var string
   */
  public $expireTimestamp = null;
  /**
   * @var string
   */
  public $receiveStartDate = null;
  /**
   * @var string
   */
  public $receiveEndDate = null;
  /**
   * @var int
   */
  public $receiveTotalLimit = null;
  /**
   * @var bool
   */
  public $generateType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batchCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'applyId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'value',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'minPrice',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'useNum',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'generateAmount',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'useRang',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'businessType',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'businessId',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'couponStatus',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'insertDate',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'isPassword',
          'type' => TType::BOOL,
          ),
        15 => array(
          'var' => 'passwordCode',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'timeValidType',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'validDay',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'startTimestamp',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'expireTimestamp',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'receiveStartDate',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'receiveEndDate',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'receiveTotalLimit',
          'type' => TType::I32,
          ),
        23 => array(
          'var' => 'generateType',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['batchCode'])) {
        $this->batchCode = $vals['batchCode'];
      }
      if (isset($vals['applyId'])) {
        $this->applyId = $vals['applyId'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['minPrice'])) {
        $this->minPrice = $vals['minPrice'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['useNum'])) {
        $this->useNum = $vals['useNum'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['generateAmount'])) {
        $this->generateAmount = $vals['generateAmount'];
      }
      if (isset($vals['useRang'])) {
        $this->useRang = $vals['useRang'];
      }
      if (isset($vals['businessType'])) {
        $this->businessType = $vals['businessType'];
      }
      if (isset($vals['businessId'])) {
        $this->businessId = $vals['businessId'];
      }
      if (isset($vals['couponStatus'])) {
        $this->couponStatus = $vals['couponStatus'];
      }
      if (isset($vals['insertDate'])) {
        $this->insertDate = $vals['insertDate'];
      }
      if (isset($vals['isPassword'])) {
        $this->isPassword = $vals['isPassword'];
      }
      if (isset($vals['passwordCode'])) {
        $this->passwordCode = $vals['passwordCode'];
      }
      if (isset($vals['timeValidType'])) {
        $this->timeValidType = $vals['timeValidType'];
      }
      if (isset($vals['validDay'])) {
        $this->validDay = $vals['validDay'];
      }
      if (isset($vals['startTimestamp'])) {
        $this->startTimestamp = $vals['startTimestamp'];
      }
      if (isset($vals['expireTimestamp'])) {
        $this->expireTimestamp = $vals['expireTimestamp'];
      }
      if (isset($vals['receiveStartDate'])) {
        $this->receiveStartDate = $vals['receiveStartDate'];
      }
      if (isset($vals['receiveEndDate'])) {
        $this->receiveEndDate = $vals['receiveEndDate'];
      }
      if (isset($vals['receiveTotalLimit'])) {
        $this->receiveTotalLimit = $vals['receiveTotalLimit'];
      }
      if (isset($vals['generateType'])) {
        $this->generateType = $vals['generateType'];
      }
    }
  }

  public function getName() {
    return 'TCouponBatchInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->applyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->minPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->useNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->generateAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->useRang);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->businessType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->businessId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->couponStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->insertDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isPassword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passwordCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timeValidType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->validDay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTimestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expireTimestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiveStartDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiveEndDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->receiveTotalLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->generateType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponBatchInfo');
    if ($this->batchCode !== null) {
      $xfer += $output->writeFieldBegin('batchCode', TType::STRING, 1);
      $xfer += $output->writeString($this->batchCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyId !== null) {
      $xfer += $output->writeFieldBegin('applyId', TType::I32, 2);
      $xfer += $output->writeI32($this->applyId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minPrice !== null) {
      $xfer += $output->writeFieldBegin('minPrice', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->minPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 5);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useNum !== null) {
      $xfer += $output->writeFieldBegin('useNum', TType::I32, 6);
      $xfer += $output->writeI32($this->useNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 7);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->generateAmount !== null) {
      $xfer += $output->writeFieldBegin('generateAmount', TType::I32, 8);
      $xfer += $output->writeI32($this->generateAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useRang !== null) {
      $xfer += $output->writeFieldBegin('useRang', TType::STRING, 9);
      $xfer += $output->writeString($this->useRang);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->businessType !== null) {
      $xfer += $output->writeFieldBegin('businessType', TType::I32, 10);
      $xfer += $output->writeI32($this->businessType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->businessId !== null) {
      $xfer += $output->writeFieldBegin('businessId', TType::I32, 11);
      $xfer += $output->writeI32($this->businessId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponStatus !== null) {
      $xfer += $output->writeFieldBegin('couponStatus', TType::I32, 12);
      $xfer += $output->writeI32($this->couponStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->insertDate !== null) {
      $xfer += $output->writeFieldBegin('insertDate', TType::STRING, 13);
      $xfer += $output->writeString($this->insertDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isPassword !== null) {
      $xfer += $output->writeFieldBegin('isPassword', TType::BOOL, 14);
      $xfer += $output->writeBool($this->isPassword);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->passwordCode !== null) {
      $xfer += $output->writeFieldBegin('passwordCode', TType::STRING, 15);
      $xfer += $output->writeString($this->passwordCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeValidType !== null) {
      $xfer += $output->writeFieldBegin('timeValidType', TType::I32, 16);
      $xfer += $output->writeI32($this->timeValidType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validDay !== null) {
      $xfer += $output->writeFieldBegin('validDay', TType::I32, 17);
      $xfer += $output->writeI32($this->validDay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTimestamp !== null) {
      $xfer += $output->writeFieldBegin('startTimestamp', TType::STRING, 18);
      $xfer += $output->writeString($this->startTimestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTimestamp !== null) {
      $xfer += $output->writeFieldBegin('expireTimestamp', TType::STRING, 19);
      $xfer += $output->writeString($this->expireTimestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiveStartDate !== null) {
      $xfer += $output->writeFieldBegin('receiveStartDate', TType::STRING, 20);
      $xfer += $output->writeString($this->receiveStartDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiveEndDate !== null) {
      $xfer += $output->writeFieldBegin('receiveEndDate', TType::STRING, 21);
      $xfer += $output->writeString($this->receiveEndDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiveTotalLimit !== null) {
      $xfer += $output->writeFieldBegin('receiveTotalLimit', TType::I32, 22);
      $xfer += $output->writeI32($this->receiveTotalLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->generateType !== null) {
      $xfer += $output->writeFieldBegin('generateType', TType::BOOL, 23);
      $xfer += $output->writeBool($this->generateType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponSupplierPro {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $batchCode = null;
  /**
   * @var int
   */
  public $supplierId = null;
  /**
   * @var double
   */
  public $supplierPro = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'batchCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'supplierId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'supplierPro',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['batchCode'])) {
        $this->batchCode = $vals['batchCode'];
      }
      if (isset($vals['supplierId'])) {
        $this->supplierId = $vals['supplierId'];
      }
      if (isset($vals['supplierPro'])) {
        $this->supplierPro = $vals['supplierPro'];
      }
    }
  }

  public function getName() {
    return 'TCouponSupplierPro';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->supplierId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->supplierPro);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponSupplierPro');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchCode !== null) {
      $xfer += $output->writeFieldBegin('batchCode', TType::STRING, 2);
      $xfer += $output->writeString($this->batchCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierId !== null) {
      $xfer += $output->writeFieldBegin('supplierId', TType::I32, 3);
      $xfer += $output->writeI32($this->supplierId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierPro !== null) {
      $xfer += $output->writeFieldBegin('supplierPro', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->supplierPro);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponSku {
  static $_TSPEC;

  /**
   * @var int
   */
  public $sku = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sku',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sku'])) {
        $this->sku = $vals['sku'];
      }
    }
  }

  public function getName() {
    return 'TCouponSku';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sku);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponSku');
    if ($this->sku !== null) {
      $xfer += $output->writeFieldBegin('sku', TType::I32, 1);
      $xfer += $output->writeI32($this->sku);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TOrderCoupon {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orderCode = null;
  /**
   * @var string
   */
  public $couponCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'couponCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderCode'])) {
        $this->orderCode = $vals['orderCode'];
      }
      if (isset($vals['couponCode'])) {
        $this->couponCode = $vals['couponCode'];
      }
    }
  }

  public function getName() {
    return 'TOrderCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->couponCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TOrderCoupon');
    if ($this->orderCode !== null) {
      $xfer += $output->writeFieldBegin('orderCode', TType::STRING, 1);
      $xfer += $output->writeString($this->orderCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponCode !== null) {
      $xfer += $output->writeFieldBegin('couponCode', TType::STRING, 2);
      $xfer += $output->writeString($this->couponCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponBrandCategory {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $batchCode = null;
  /**
   * @var int
   */
  public $brandId = null;
  /**
   * @var int
   */
  public $categoryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'batchCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'brandId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'categoryId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['batchCode'])) {
        $this->batchCode = $vals['batchCode'];
      }
      if (isset($vals['brandId'])) {
        $this->brandId = $vals['brandId'];
      }
      if (isset($vals['categoryId'])) {
        $this->categoryId = $vals['categoryId'];
      }
    }
  }

  public function getName() {
    return 'TCouponBrandCategory';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->brandId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->categoryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponBrandCategory');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchCode !== null) {
      $xfer += $output->writeFieldBegin('batchCode', TType::STRING, 2);
      $xfer += $output->writeString($this->batchCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->brandId !== null) {
      $xfer += $output->writeFieldBegin('brandId', TType::I32, 3);
      $xfer += $output->writeI32($this->brandId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->categoryId !== null) {
      $xfer += $output->writeFieldBegin('categoryId', TType::I32, 4);
      $xfer += $output->writeI32($this->categoryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponExcludeSku {
  static $_TSPEC;

  /**
   * @var int
   */
  public $sku = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sku',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sku'])) {
        $this->sku = $vals['sku'];
      }
    }
  }

  public function getName() {
    return 'TCouponExcludeSku';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sku);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponExcludeSku');
    if ($this->sku !== null) {
      $xfer += $output->writeFieldBegin('sku', TType::I32, 1);
      $xfer += $output->writeI32($this->sku);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponDetail {
  static $_TSPEC;

  /**
   * @var string
   */
  public $code = null;
  /**
   * @var string
   */
  public $batchCode = null;
  /**
   * @var int
   */
  public $leftUseNum = null;
  /**
   * @var int
   */
  public $bindUserId = null;
  /**
   * @var string
   */
  public $bindTime = null;
  /**
   * @var string
   */
  public $useStartTime = null;
  /**
   * @var string
   */
  public $useEndTime = null;
  /**
   * @var int
   */
  public $isSended = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'batchCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'leftUseNum',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'bindUserId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'bindTime',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'useStartTime',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'useEndTime',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'isSended',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['batchCode'])) {
        $this->batchCode = $vals['batchCode'];
      }
      if (isset($vals['leftUseNum'])) {
        $this->leftUseNum = $vals['leftUseNum'];
      }
      if (isset($vals['bindUserId'])) {
        $this->bindUserId = $vals['bindUserId'];
      }
      if (isset($vals['bindTime'])) {
        $this->bindTime = $vals['bindTime'];
      }
      if (isset($vals['useStartTime'])) {
        $this->useStartTime = $vals['useStartTime'];
      }
      if (isset($vals['useEndTime'])) {
        $this->useEndTime = $vals['useEndTime'];
      }
      if (isset($vals['isSended'])) {
        $this->isSended = $vals['isSended'];
      }
    }
  }

  public function getName() {
    return 'TCouponDetail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->leftUseNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bindUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bindTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->useStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->useEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isSended);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponDetail');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::STRING, 1);
      $xfer += $output->writeString($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchCode !== null) {
      $xfer += $output->writeFieldBegin('batchCode', TType::STRING, 2);
      $xfer += $output->writeString($this->batchCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->leftUseNum !== null) {
      $xfer += $output->writeFieldBegin('leftUseNum', TType::I32, 3);
      $xfer += $output->writeI32($this->leftUseNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bindUserId !== null) {
      $xfer += $output->writeFieldBegin('bindUserId', TType::I32, 4);
      $xfer += $output->writeI32($this->bindUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bindTime !== null) {
      $xfer += $output->writeFieldBegin('bindTime', TType::STRING, 5);
      $xfer += $output->writeString($this->bindTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useStartTime !== null) {
      $xfer += $output->writeFieldBegin('useStartTime', TType::STRING, 6);
      $xfer += $output->writeString($this->useStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useEndTime !== null) {
      $xfer += $output->writeFieldBegin('useEndTime', TType::STRING, 7);
      $xfer += $output->writeString($this->useEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isSended !== null) {
      $xfer += $output->writeFieldBegin('isSended', TType::I32, 8);
      $xfer += $output->writeI32($this->isSended);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsQueryCouponList {
  static $_TSPEC;

  /**
   * @var int
   */
  public $pageNo = null;
  /**
   * @var int
   */
  public $pageSize = null;
  /**
   * @var string
   */
  public $batchCodes = null;
  /**
   * @var string
   */
  public $status = null;
  /**
   * @var string
   */
  public $bindStartTime = null;
  /**
   * @var string
   */
  public $bindEndTime = null;
  /**
   * @var int
   */
  public $bindUserId = null;
  /**
   * @var string
   */
  public $isBind = null;
  /**
   * @var string
   */
  public $applyIds = null;
  /**
   * @var string
   */
  public $couponCodes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'batchCodes',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'bindStartTime',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'bindEndTime',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'bindUserId',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'isBind',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'applyIds',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'couponCodes',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['batchCodes'])) {
        $this->batchCodes = $vals['batchCodes'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['bindStartTime'])) {
        $this->bindStartTime = $vals['bindStartTime'];
      }
      if (isset($vals['bindEndTime'])) {
        $this->bindEndTime = $vals['bindEndTime'];
      }
      if (isset($vals['bindUserId'])) {
        $this->bindUserId = $vals['bindUserId'];
      }
      if (isset($vals['isBind'])) {
        $this->isBind = $vals['isBind'];
      }
      if (isset($vals['applyIds'])) {
        $this->applyIds = $vals['applyIds'];
      }
      if (isset($vals['couponCodes'])) {
        $this->couponCodes = $vals['couponCodes'];
      }
    }
  }

  public function getName() {
    return 'TParamsQueryCouponList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchCodes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bindStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bindEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bindUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->isBind);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applyIds);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->couponCodes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsQueryCouponList');
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 1);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 2);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchCodes !== null) {
      $xfer += $output->writeFieldBegin('batchCodes', TType::STRING, 3);
      $xfer += $output->writeString($this->batchCodes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::STRING, 4);
      $xfer += $output->writeString($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bindStartTime !== null) {
      $xfer += $output->writeFieldBegin('bindStartTime', TType::STRING, 5);
      $xfer += $output->writeString($this->bindStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bindEndTime !== null) {
      $xfer += $output->writeFieldBegin('bindEndTime', TType::STRING, 6);
      $xfer += $output->writeString($this->bindEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bindUserId !== null) {
      $xfer += $output->writeFieldBegin('bindUserId', TType::I32, 7);
      $xfer += $output->writeI32($this->bindUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isBind !== null) {
      $xfer += $output->writeFieldBegin('isBind', TType::STRING, 8);
      $xfer += $output->writeString($this->isBind);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyIds !== null) {
      $xfer += $output->writeFieldBegin('applyIds', TType::STRING, 9);
      $xfer += $output->writeString($this->applyIds);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponCodes !== null) {
      $xfer += $output->writeFieldBegin('couponCodes', TType::STRING, 10);
      $xfer += $output->writeString($this->couponCodes);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultQueryCouponList {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var \miasrv\coupon\ums\TCouponDetail[]
   */
  public $pageList = null;
  /**
   * @var int
   */
  public $total = null;
  /**
   * @var int
   */
  public $pageNo = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'pageList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\ums\TCouponDetail',
            ),
          ),
        6 => array(
          'var' => 'total',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['pageList'])) {
        $this->pageList = $vals['pageList'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
    }
  }

  public function getName() {
    return 'TResultQueryCouponList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->pageList = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \miasrv\coupon\ums\TCouponDetail();
              $xfer += $elem5->read($input);
              $this->pageList []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultQueryCouponList');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageList !== null) {
      if (!is_array($this->pageList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pageList', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->pageList));
        {
          foreach ($this->pageList as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I64, 6);
      $xfer += $output->writeI64($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 7);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 8);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsQueryBatchInfoList {
  static $_TSPEC;

  /**
   * @var int
   */
  public $pageNo = null;
  /**
   * @var int
   */
  public $pageSize = null;
  /**
   * @var string
   */
  public $applyIds = null;
  /**
   * @var string
   */
  public $useStartTime = null;
  /**
   * @var string
   */
  public $useEndTime = null;
  /**
   * @var string
   */
  public $genStatus = null;
  /**
   * @var string
   */
  public $receiveStartTime = null;
  /**
   * @var string
   */
  public $receiveEndTime = null;
  /**
   * @var string
   */
  public $businessType = null;
  /**
   * @var string
   */
  public $batchCodes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'applyIds',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'useStartTime',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'useEndTime',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'genStatus',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'receiveStartTime',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'receiveEndTime',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'businessType',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'batchCodes',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['applyIds'])) {
        $this->applyIds = $vals['applyIds'];
      }
      if (isset($vals['useStartTime'])) {
        $this->useStartTime = $vals['useStartTime'];
      }
      if (isset($vals['useEndTime'])) {
        $this->useEndTime = $vals['useEndTime'];
      }
      if (isset($vals['genStatus'])) {
        $this->genStatus = $vals['genStatus'];
      }
      if (isset($vals['receiveStartTime'])) {
        $this->receiveStartTime = $vals['receiveStartTime'];
      }
      if (isset($vals['receiveEndTime'])) {
        $this->receiveEndTime = $vals['receiveEndTime'];
      }
      if (isset($vals['businessType'])) {
        $this->businessType = $vals['businessType'];
      }
      if (isset($vals['batchCodes'])) {
        $this->batchCodes = $vals['batchCodes'];
      }
    }
  }

  public function getName() {
    return 'TParamsQueryBatchInfoList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applyIds);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->useStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->useEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->genStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiveStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiveEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->businessType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchCodes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsQueryBatchInfoList');
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 1);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 2);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyIds !== null) {
      $xfer += $output->writeFieldBegin('applyIds', TType::STRING, 3);
      $xfer += $output->writeString($this->applyIds);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useStartTime !== null) {
      $xfer += $output->writeFieldBegin('useStartTime', TType::STRING, 4);
      $xfer += $output->writeString($this->useStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useEndTime !== null) {
      $xfer += $output->writeFieldBegin('useEndTime', TType::STRING, 5);
      $xfer += $output->writeString($this->useEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->genStatus !== null) {
      $xfer += $output->writeFieldBegin('genStatus', TType::STRING, 6);
      $xfer += $output->writeString($this->genStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiveStartTime !== null) {
      $xfer += $output->writeFieldBegin('receiveStartTime', TType::STRING, 7);
      $xfer += $output->writeString($this->receiveStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiveEndTime !== null) {
      $xfer += $output->writeFieldBegin('receiveEndTime', TType::STRING, 8);
      $xfer += $output->writeString($this->receiveEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->businessType !== null) {
      $xfer += $output->writeFieldBegin('businessType', TType::STRING, 9);
      $xfer += $output->writeString($this->businessType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchCodes !== null) {
      $xfer += $output->writeFieldBegin('batchCodes', TType::STRING, 10);
      $xfer += $output->writeString($this->batchCodes);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultQueryBatchInfoList {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var \miasrv\coupon\ums\TCouponBatchInfo[]
   */
  public $pageList = null;
  /**
   * @var int
   */
  public $total = null;
  /**
   * @var int
   */
  public $pageNo = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'pageList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\ums\TCouponBatchInfo',
            ),
          ),
        6 => array(
          'var' => 'total',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['pageList'])) {
        $this->pageList = $vals['pageList'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
    }
  }

  public function getName() {
    return 'TResultQueryBatchInfoList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->pageList = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \miasrv\coupon\ums\TCouponBatchInfo();
              $xfer += $elem12->read($input);
              $this->pageList []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultQueryBatchInfoList');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageList !== null) {
      if (!is_array($this->pageList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pageList', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->pageList));
        {
          foreach ($this->pageList as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I64, 6);
      $xfer += $output->writeI64($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 7);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 8);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsQueryBrandCategorys {
  static $_TSPEC;

  /**
   * @var int
   */
  public $pageNo = null;
  /**
   * @var int
   */
  public $pageSize = null;
  /**
   * @var string
   */
  public $applyId = null;
  /**
   * @var string
   */
  public $batchCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'applyId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'batchCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['applyId'])) {
        $this->applyId = $vals['applyId'];
      }
      if (isset($vals['batchCode'])) {
        $this->batchCode = $vals['batchCode'];
      }
    }
  }

  public function getName() {
    return 'TParamsQueryBrandCategorys';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsQueryBrandCategorys');
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 1);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 2);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyId !== null) {
      $xfer += $output->writeFieldBegin('applyId', TType::STRING, 3);
      $xfer += $output->writeString($this->applyId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchCode !== null) {
      $xfer += $output->writeFieldBegin('batchCode', TType::STRING, 4);
      $xfer += $output->writeString($this->batchCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultQueryBrandCategorys {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var \miasrv\coupon\ums\TCouponBrandCategory[]
   */
  public $pageList = null;
  /**
   * @var int
   */
  public $total = null;
  /**
   * @var int
   */
  public $pageNo = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'pageList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\ums\TCouponBrandCategory',
            ),
          ),
        6 => array(
          'var' => 'total',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['pageList'])) {
        $this->pageList = $vals['pageList'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
    }
  }

  public function getName() {
    return 'TResultQueryBrandCategorys';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->pageList = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \miasrv\coupon\ums\TCouponBrandCategory();
              $xfer += $elem19->read($input);
              $this->pageList []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultQueryBrandCategorys');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageList !== null) {
      if (!is_array($this->pageList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pageList', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->pageList));
        {
          foreach ($this->pageList as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I64, 6);
      $xfer += $output->writeI64($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 7);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 8);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsQueryExcludeSkus {
  static $_TSPEC;

  /**
   * @var int
   */
  public $pageNo = null;
  /**
   * @var int
   */
  public $pageSize = null;
  /**
   * @var string
   */
  public $applyId = null;
  /**
   * @var string
   */
  public $batchCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'applyId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'batchCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['applyId'])) {
        $this->applyId = $vals['applyId'];
      }
      if (isset($vals['batchCode'])) {
        $this->batchCode = $vals['batchCode'];
      }
    }
  }

  public function getName() {
    return 'TParamsQueryExcludeSkus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsQueryExcludeSkus');
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 1);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 2);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyId !== null) {
      $xfer += $output->writeFieldBegin('applyId', TType::STRING, 3);
      $xfer += $output->writeString($this->applyId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchCode !== null) {
      $xfer += $output->writeFieldBegin('batchCode', TType::STRING, 4);
      $xfer += $output->writeString($this->batchCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultQueryExcludeSkus {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var \miasrv\coupon\ums\TCouponExcludeSku[]
   */
  public $pageList = null;
  /**
   * @var int
   */
  public $total = null;
  /**
   * @var int
   */
  public $pageNo = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'pageList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\ums\TCouponExcludeSku',
            ),
          ),
        6 => array(
          'var' => 'total',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['pageList'])) {
        $this->pageList = $vals['pageList'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
    }
  }

  public function getName() {
    return 'TResultQueryExcludeSkus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->pageList = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \miasrv\coupon\ums\TCouponExcludeSku();
              $xfer += $elem26->read($input);
              $this->pageList []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultQueryExcludeSkus');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageList !== null) {
      if (!is_array($this->pageList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pageList', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->pageList));
        {
          foreach ($this->pageList as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I64, 6);
      $xfer += $output->writeI64($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 7);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 8);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsQueryCouponSkus {
  static $_TSPEC;

  /**
   * @var int
   */
  public $pageNo = null;
  /**
   * @var int
   */
  public $pageSize = null;
  /**
   * @var string
   */
  public $applyId = null;
  /**
   * @var string
   */
  public $batchCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'applyId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'batchCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['applyId'])) {
        $this->applyId = $vals['applyId'];
      }
      if (isset($vals['batchCode'])) {
        $this->batchCode = $vals['batchCode'];
      }
    }
  }

  public function getName() {
    return 'TParamsQueryCouponSkus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsQueryCouponSkus');
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 1);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 2);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyId !== null) {
      $xfer += $output->writeFieldBegin('applyId', TType::STRING, 3);
      $xfer += $output->writeString($this->applyId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchCode !== null) {
      $xfer += $output->writeFieldBegin('batchCode', TType::STRING, 4);
      $xfer += $output->writeString($this->batchCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultQueryCouponSkus {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var \miasrv\coupon\ums\TCouponSku[]
   */
  public $pageList = null;
  /**
   * @var int
   */
  public $total = null;
  /**
   * @var int
   */
  public $pageNo = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'pageList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\ums\TCouponSku',
            ),
          ),
        6 => array(
          'var' => 'total',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['pageList'])) {
        $this->pageList = $vals['pageList'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
    }
  }

  public function getName() {
    return 'TResultQueryCouponSkus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->pageList = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new \miasrv\coupon\ums\TCouponSku();
              $xfer += $elem33->read($input);
              $this->pageList []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultQueryCouponSkus');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageList !== null) {
      if (!is_array($this->pageList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pageList', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->pageList));
        {
          foreach ($this->pageList as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I64, 6);
      $xfer += $output->writeI64($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 7);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 8);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsQuerySupplierPros {
  static $_TSPEC;

  /**
   * @var int
   */
  public $pageNo = null;
  /**
   * @var int
   */
  public $pageSize = null;
  /**
   * @var string
   */
  public $applyId = null;
  /**
   * @var string
   */
  public $batchCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'applyId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'batchCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['applyId'])) {
        $this->applyId = $vals['applyId'];
      }
      if (isset($vals['batchCode'])) {
        $this->batchCode = $vals['batchCode'];
      }
    }
  }

  public function getName() {
    return 'TParamsQuerySupplierPros';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsQuerySupplierPros');
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 1);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 2);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyId !== null) {
      $xfer += $output->writeFieldBegin('applyId', TType::STRING, 3);
      $xfer += $output->writeString($this->applyId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchCode !== null) {
      $xfer += $output->writeFieldBegin('batchCode', TType::STRING, 4);
      $xfer += $output->writeString($this->batchCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultQuerySupplierPros {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var \miasrv\coupon\ums\TCouponSupplierPro[]
   */
  public $pageList = null;
  /**
   * @var int
   */
  public $total = null;
  /**
   * @var int
   */
  public $pageNo = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'pageList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\ums\TCouponSupplierPro',
            ),
          ),
        6 => array(
          'var' => 'total',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['pageList'])) {
        $this->pageList = $vals['pageList'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
    }
  }

  public function getName() {
    return 'TResultQuerySupplierPros';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->pageList = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \miasrv\coupon\ums\TCouponSupplierPro();
              $xfer += $elem40->read($input);
              $this->pageList []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultQuerySupplierPros');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageList !== null) {
      if (!is_array($this->pageList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pageList', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->pageList));
        {
          foreach ($this->pageList as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I64, 6);
      $xfer += $output->writeI64($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 7);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 8);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultUnBindCoupon {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var int
   */
  public $resultInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'resultInfo',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['resultInfo'])) {
        $this->resultInfo = $vals['resultInfo'];
      }
    }
  }

  public function getName() {
    return 'TResultUnBindCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resultInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultUnBindCoupon');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resultInfo !== null) {
      $xfer += $output->writeFieldBegin('resultInfo', TType::I32, 5);
      $xfer += $output->writeI32($this->resultInfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultGenCoupon {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var \miasrv\coupon\ums\TCouponBatchInfo
   */
  public $couponBatchInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'couponBatchInfo',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TCouponBatchInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['couponBatchInfo'])) {
        $this->couponBatchInfo = $vals['couponBatchInfo'];
      }
    }
  }

  public function getName() {
    return 'TResultGenCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->couponBatchInfo = new \miasrv\coupon\ums\TCouponBatchInfo();
            $xfer += $this->couponBatchInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultGenCoupon');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponBatchInfo !== null) {
      if (!is_object($this->couponBatchInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('couponBatchInfo', TType::STRUCT, 5);
      $xfer += $this->couponBatchInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultRecoverCoupon {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var int
   */
  public $recoverCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'recoverCount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['recoverCount'])) {
        $this->recoverCount = $vals['recoverCount'];
      }
    }
  }

  public function getName() {
    return 'TResultRecoverCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->recoverCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultRecoverCoupon');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recoverCount !== null) {
      $xfer += $output->writeFieldBegin('recoverCount', TType::I32, 5);
      $xfer += $output->writeI32($this->recoverCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultModifyCouponBatchInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var int
   */
  public $resultInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'resultInfo',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['resultInfo'])) {
        $this->resultInfo = $vals['resultInfo'];
      }
    }
  }

  public function getName() {
    return 'TResultModifyCouponBatchInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resultInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultModifyCouponBatchInfo');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resultInfo !== null) {
      $xfer += $output->writeFieldBegin('resultInfo', TType::I32, 5);
      $xfer += $output->writeI32($this->resultInfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultDisableCoupon {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var int
   */
  public $disableCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'disableCount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['disableCount'])) {
        $this->disableCount = $vals['disableCount'];
      }
    }
  }

  public function getName() {
    return 'TResultDisableCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->disableCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultDisableCoupon');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->disableCount !== null) {
      $xfer += $output->writeFieldBegin('disableCount', TType::I32, 5);
      $xfer += $output->writeI32($this->disableCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultQueryCoupon {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var \miasrv\coupon\ums\TCouponDetail
   */
  public $coupon = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'coupon',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TCouponDetail',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['coupon'])) {
        $this->coupon = $vals['coupon'];
      }
    }
  }

  public function getName() {
    return 'TResultQueryCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->coupon = new \miasrv\coupon\ums\TCouponDetail();
            $xfer += $this->coupon->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultQueryCoupon');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coupon !== null) {
      if (!is_object($this->coupon)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('coupon', TType::STRUCT, 5);
      $xfer += $this->coupon->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultQueryOrderCouponList {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var \miasrv\coupon\ums\TOrderCoupon[]
   */
  public $orderCouponList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'orderCouponList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\ums\TOrderCoupon',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['orderCouponList'])) {
        $this->orderCouponList = $vals['orderCouponList'];
      }
    }
  }

  public function getName() {
    return 'TResultQueryOrderCouponList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->orderCouponList = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $elem47 = new \miasrv\coupon\ums\TOrderCoupon();
              $xfer += $elem47->read($input);
              $this->orderCouponList []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultQueryOrderCouponList');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderCouponList !== null) {
      if (!is_array($this->orderCouponList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orderCouponList', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->orderCouponList));
        {
          foreach ($this->orderCouponList as $iter48)
          {
            $xfer += $iter48->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultQueryCouponOrderList {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var \miasrv\coupon\ums\TOrderCoupon[]
   */
  public $orderCouponList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'orderCouponList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\ums\TOrderCoupon',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['orderCouponList'])) {
        $this->orderCouponList = $vals['orderCouponList'];
      }
    }
  }

  public function getName() {
    return 'TResultQueryCouponOrderList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->orderCouponList = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $elem54 = new \miasrv\coupon\ums\TOrderCoupon();
              $xfer += $elem54->read($input);
              $this->orderCouponList []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultQueryCouponOrderList');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderCouponList !== null) {
      if (!is_array($this->orderCouponList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orderCouponList', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->orderCouponList));
        {
          foreach ($this->orderCouponList as $iter55)
          {
            $xfer += $iter55->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsUnBindCoupon {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $couponCodes = null;
  /**
   * @var string
   */
  public $opUser = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'couponCodes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'opUser',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['couponCodes'])) {
        $this->couponCodes = $vals['couponCodes'];
      }
      if (isset($vals['opUser'])) {
        $this->opUser = $vals['opUser'];
      }
    }
  }

  public function getName() {
    return 'TParamsUnBindCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->couponCodes = array();
            $_size56 = 0;
            $_etype59 = 0;
            $xfer += $input->readListBegin($_etype59, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $elem61 = null;
              $xfer += $input->readString($elem61);
              $this->couponCodes []= $elem61;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->opUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsUnBindCoupon');
    if ($this->couponCodes !== null) {
      if (!is_array($this->couponCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('couponCodes', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->couponCodes));
        {
          foreach ($this->couponCodes as $iter62)
          {
            $xfer += $output->writeString($iter62);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opUser !== null) {
      $xfer += $output->writeFieldBegin('opUser', TType::STRING, 2);
      $xfer += $output->writeString($this->opUser);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsGenCoupon {
  static $_TSPEC;

  /**
   * @var string
   */
  public $applyId = null;
  /**
   * @var string
   */
  public $opUser = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'applyId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'opUser',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['applyId'])) {
        $this->applyId = $vals['applyId'];
      }
      if (isset($vals['opUser'])) {
        $this->opUser = $vals['opUser'];
      }
    }
  }

  public function getName() {
    return 'TParamsGenCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->opUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsGenCoupon');
    if ($this->applyId !== null) {
      $xfer += $output->writeFieldBegin('applyId', TType::STRING, 1);
      $xfer += $output->writeString($this->applyId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opUser !== null) {
      $xfer += $output->writeFieldBegin('opUser', TType::STRING, 2);
      $xfer += $output->writeString($this->opUser);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsRecoverCoupon {
  static $_TSPEC;

  /**
   * @var string
   */
  public $superiorOrderCode = null;
  /**
   * @var string
   */
  public $reason = null;
  /**
   * @var string
   */
  public $opUser = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'superiorOrderCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'opUser',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['superiorOrderCode'])) {
        $this->superiorOrderCode = $vals['superiorOrderCode'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['opUser'])) {
        $this->opUser = $vals['opUser'];
      }
    }
  }

  public function getName() {
    return 'TParamsRecoverCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->superiorOrderCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->opUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsRecoverCoupon');
    if ($this->superiorOrderCode !== null) {
      $xfer += $output->writeFieldBegin('superiorOrderCode', TType::STRING, 1);
      $xfer += $output->writeString($this->superiorOrderCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 2);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opUser !== null) {
      $xfer += $output->writeFieldBegin('opUser', TType::STRING, 3);
      $xfer += $output->writeString($this->opUser);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsModifyCouponBatchInfo {
  static $_TSPEC;

  /**
   * @var string
   */
  public $batchCode = null;
  /**
   * @var \miasrv\coupon\ums\TCouponBatchInfo
   */
  public $newBatchInfo = null;
  /**
   * @var string
   */
  public $opUser = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batchCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'newBatchInfo',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\ums\TCouponBatchInfo',
          ),
        3 => array(
          'var' => 'opUser',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['batchCode'])) {
        $this->batchCode = $vals['batchCode'];
      }
      if (isset($vals['newBatchInfo'])) {
        $this->newBatchInfo = $vals['newBatchInfo'];
      }
      if (isset($vals['opUser'])) {
        $this->opUser = $vals['opUser'];
      }
    }
  }

  public function getName() {
    return 'TParamsModifyCouponBatchInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->newBatchInfo = new \miasrv\coupon\ums\TCouponBatchInfo();
            $xfer += $this->newBatchInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->opUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsModifyCouponBatchInfo');
    if ($this->batchCode !== null) {
      $xfer += $output->writeFieldBegin('batchCode', TType::STRING, 1);
      $xfer += $output->writeString($this->batchCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->newBatchInfo !== null) {
      if (!is_object($this->newBatchInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('newBatchInfo', TType::STRUCT, 2);
      $xfer += $this->newBatchInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opUser !== null) {
      $xfer += $output->writeFieldBegin('opUser', TType::STRING, 3);
      $xfer += $output->writeString($this->opUser);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsDisableCoupon {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $couponCodes = null;
  /**
   * @var string
   */
  public $reason = null;
  /**
   * @var string
   */
  public $opUser = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'couponCodes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'opUser',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['couponCodes'])) {
        $this->couponCodes = $vals['couponCodes'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['opUser'])) {
        $this->opUser = $vals['opUser'];
      }
    }
  }

  public function getName() {
    return 'TParamsDisableCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->couponCodes = array();
            $_size63 = 0;
            $_etype66 = 0;
            $xfer += $input->readListBegin($_etype66, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $elem68 = null;
              $xfer += $input->readString($elem68);
              $this->couponCodes []= $elem68;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->opUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsDisableCoupon');
    if ($this->couponCodes !== null) {
      if (!is_array($this->couponCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('couponCodes', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->couponCodes));
        {
          foreach ($this->couponCodes as $iter69)
          {
            $xfer += $output->writeString($iter69);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 2);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opUser !== null) {
      $xfer += $output->writeFieldBegin('opUser', TType::STRING, 3);
      $xfer += $output->writeString($this->opUser);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsQueryCoupon {
  static $_TSPEC;

  /**
   * @var string
   */
  public $couponCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'couponCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['couponCode'])) {
        $this->couponCode = $vals['couponCode'];
      }
    }
  }

  public function getName() {
    return 'TParamsQueryCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->couponCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsQueryCoupon');
    if ($this->couponCode !== null) {
      $xfer += $output->writeFieldBegin('couponCode', TType::STRING, 1);
      $xfer += $output->writeString($this->couponCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsQueryOrderCouponList {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $superiorOrderCodes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'superiorOrderCodes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['superiorOrderCodes'])) {
        $this->superiorOrderCodes = $vals['superiorOrderCodes'];
      }
    }
  }

  public function getName() {
    return 'TParamsQueryOrderCouponList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->superiorOrderCodes = array();
            $_size70 = 0;
            $_etype73 = 0;
            $xfer += $input->readListBegin($_etype73, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $elem75 = null;
              $xfer += $input->readString($elem75);
              $this->superiorOrderCodes []= $elem75;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsQueryOrderCouponList');
    if ($this->superiorOrderCodes !== null) {
      if (!is_array($this->superiorOrderCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('superiorOrderCodes', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->superiorOrderCodes));
        {
          foreach ($this->superiorOrderCodes as $iter76)
          {
            $xfer += $output->writeString($iter76);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsQueryCouponOrderList {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $CouponCodes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'CouponCodes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['CouponCodes'])) {
        $this->CouponCodes = $vals['CouponCodes'];
      }
    }
  }

  public function getName() {
    return 'TParamsQueryCouponOrderList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->CouponCodes = array();
            $_size77 = 0;
            $_etype80 = 0;
            $xfer += $input->readListBegin($_etype80, $_size77);
            for ($_i81 = 0; $_i81 < $_size77; ++$_i81)
            {
              $elem82 = null;
              $xfer += $input->readString($elem82);
              $this->CouponCodes []= $elem82;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsQueryCouponOrderList');
    if ($this->CouponCodes !== null) {
      if (!is_array($this->CouponCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('CouponCodes', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->CouponCodes));
        {
          foreach ($this->CouponCodes as $iter83)
          {
            $xfer += $output->writeString($iter83);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TOrderItem {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $brandId = null;
  /**
   * @var int
   */
  public $categoryId = null;
  /**
   * @var int
   */
  public $parentCategoryId = null;
  /**
   * @var double
   */
  public $salePrice = null;
  /**
   * @var double
   */
  public $dealPrice = null;
  /**
   * @var double
   */
  public $shipPrice = null;
  /**
   * @var double
   */
  public $taxPrice = null;
  /**
   * @var double
   */
  public $reducePrice = null;
  /**
   * @var double
   */
  public $redbagPrice = null;
  /**
   * @var double
   */
  public $cashCouponPrice = null;
  /**
   * @var double
   */
  public $couponPrice = null;
  /**
   * @var double
   */
  public $payPrice = null;
  /**
   * @var int
   */
  public $itemId = null;
  /**
   * @var bool
   */
  public $isGroupon = null;
  /**
   * @var int
   */
  public $grouponId = null;
  /**
   * @var int
   */
  public $promotionId = null;
  /**
   * @var int
   */
  public $giftType = null;
  /**
   * @var int
   */
  public $supplierId = null;
  /**
   * @var string
   */
  public $couponCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'brandId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'categoryId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'parentCategoryId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'salePrice',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'dealPrice',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'shipPrice',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'taxPrice',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'reducePrice',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'redbagPrice',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'cashCouponPrice',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'couponPrice',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'payPrice',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'itemId',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'isGroupon',
          'type' => TType::BOOL,
          ),
        16 => array(
          'var' => 'grouponId',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'promotionId',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'giftType',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'supplierId',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'couponCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['brandId'])) {
        $this->brandId = $vals['brandId'];
      }
      if (isset($vals['categoryId'])) {
        $this->categoryId = $vals['categoryId'];
      }
      if (isset($vals['parentCategoryId'])) {
        $this->parentCategoryId = $vals['parentCategoryId'];
      }
      if (isset($vals['salePrice'])) {
        $this->salePrice = $vals['salePrice'];
      }
      if (isset($vals['dealPrice'])) {
        $this->dealPrice = $vals['dealPrice'];
      }
      if (isset($vals['shipPrice'])) {
        $this->shipPrice = $vals['shipPrice'];
      }
      if (isset($vals['taxPrice'])) {
        $this->taxPrice = $vals['taxPrice'];
      }
      if (isset($vals['reducePrice'])) {
        $this->reducePrice = $vals['reducePrice'];
      }
      if (isset($vals['redbagPrice'])) {
        $this->redbagPrice = $vals['redbagPrice'];
      }
      if (isset($vals['cashCouponPrice'])) {
        $this->cashCouponPrice = $vals['cashCouponPrice'];
      }
      if (isset($vals['couponPrice'])) {
        $this->couponPrice = $vals['couponPrice'];
      }
      if (isset($vals['payPrice'])) {
        $this->payPrice = $vals['payPrice'];
      }
      if (isset($vals['itemId'])) {
        $this->itemId = $vals['itemId'];
      }
      if (isset($vals['isGroupon'])) {
        $this->isGroupon = $vals['isGroupon'];
      }
      if (isset($vals['grouponId'])) {
        $this->grouponId = $vals['grouponId'];
      }
      if (isset($vals['promotionId'])) {
        $this->promotionId = $vals['promotionId'];
      }
      if (isset($vals['giftType'])) {
        $this->giftType = $vals['giftType'];
      }
      if (isset($vals['supplierId'])) {
        $this->supplierId = $vals['supplierId'];
      }
      if (isset($vals['couponCode'])) {
        $this->couponCode = $vals['couponCode'];
      }
    }
  }

  public function getName() {
    return 'TOrderItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->brandId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->categoryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parentCategoryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->salePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->dealPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->shipPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->taxPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->reducePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->redbagPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cashCouponPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->couponPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->payPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->itemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isGroupon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->grouponId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->promotionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->giftType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->supplierId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->couponCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TOrderItem');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->brandId !== null) {
      $xfer += $output->writeFieldBegin('brandId', TType::I32, 2);
      $xfer += $output->writeI32($this->brandId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->categoryId !== null) {
      $xfer += $output->writeFieldBegin('categoryId', TType::I32, 3);
      $xfer += $output->writeI32($this->categoryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parentCategoryId !== null) {
      $xfer += $output->writeFieldBegin('parentCategoryId', TType::I32, 4);
      $xfer += $output->writeI32($this->parentCategoryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salePrice !== null) {
      $xfer += $output->writeFieldBegin('salePrice', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->salePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dealPrice !== null) {
      $xfer += $output->writeFieldBegin('dealPrice', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->dealPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shipPrice !== null) {
      $xfer += $output->writeFieldBegin('shipPrice', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->shipPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->taxPrice !== null) {
      $xfer += $output->writeFieldBegin('taxPrice', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->taxPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reducePrice !== null) {
      $xfer += $output->writeFieldBegin('reducePrice', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->reducePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->redbagPrice !== null) {
      $xfer += $output->writeFieldBegin('redbagPrice', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->redbagPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cashCouponPrice !== null) {
      $xfer += $output->writeFieldBegin('cashCouponPrice', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->cashCouponPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponPrice !== null) {
      $xfer += $output->writeFieldBegin('couponPrice', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->couponPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payPrice !== null) {
      $xfer += $output->writeFieldBegin('payPrice', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->payPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemId !== null) {
      $xfer += $output->writeFieldBegin('itemId', TType::I32, 14);
      $xfer += $output->writeI32($this->itemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isGroupon !== null) {
      $xfer += $output->writeFieldBegin('isGroupon', TType::BOOL, 15);
      $xfer += $output->writeBool($this->isGroupon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grouponId !== null) {
      $xfer += $output->writeFieldBegin('grouponId', TType::I32, 16);
      $xfer += $output->writeI32($this->grouponId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotionId !== null) {
      $xfer += $output->writeFieldBegin('promotionId', TType::I32, 17);
      $xfer += $output->writeI32($this->promotionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->giftType !== null) {
      $xfer += $output->writeFieldBegin('giftType', TType::I32, 18);
      $xfer += $output->writeI32($this->giftType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierId !== null) {
      $xfer += $output->writeFieldBegin('supplierId', TType::I32, 19);
      $xfer += $output->writeI32($this->supplierId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponCode !== null) {
      $xfer += $output->writeFieldBegin('couponCode', TType::STRING, 20);
      $xfer += $output->writeString($this->couponCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsConsumeCoupon {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\ums\TOrderItem[]
   */
  public $orderItems = null;
  /**
   * @var string
   */
  public $couponCode = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $superiorOrderCode = null;
  /**
   * @var double
   */
  public $dealPrice = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderItems',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\ums\TOrderItem',
            ),
          ),
        2 => array(
          'var' => 'couponCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'superiorOrderCode',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'dealPrice',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderItems'])) {
        $this->orderItems = $vals['orderItems'];
      }
      if (isset($vals['couponCode'])) {
        $this->couponCode = $vals['couponCode'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['superiorOrderCode'])) {
        $this->superiorOrderCode = $vals['superiorOrderCode'];
      }
      if (isset($vals['dealPrice'])) {
        $this->dealPrice = $vals['dealPrice'];
      }
    }
  }

  public function getName() {
    return 'TParamsConsumeCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->orderItems = array();
            $_size84 = 0;
            $_etype87 = 0;
            $xfer += $input->readListBegin($_etype87, $_size84);
            for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
            {
              $elem89 = null;
              $elem89 = new \miasrv\coupon\ums\TOrderItem();
              $xfer += $elem89->read($input);
              $this->orderItems []= $elem89;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->couponCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->superiorOrderCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->dealPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsConsumeCoupon');
    if ($this->orderItems !== null) {
      if (!is_array($this->orderItems)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('orderItems', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->orderItems));
        {
          foreach ($this->orderItems as $iter90)
          {
            $xfer += $iter90->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponCode !== null) {
      $xfer += $output->writeFieldBegin('couponCode', TType::STRING, 2);
      $xfer += $output->writeString($this->couponCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 3);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->superiorOrderCode !== null) {
      $xfer += $output->writeFieldBegin('superiorOrderCode', TType::STRING, 4);
      $xfer += $output->writeString($this->superiorOrderCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dealPrice !== null) {
      $xfer += $output->writeFieldBegin('dealPrice', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->dealPrice);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultConsumeCoupon {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var \miasrv\coupon\ums\TOrderItem[]
   */
  public $resultInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'resultInfo',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\ums\TOrderItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['resultInfo'])) {
        $this->resultInfo = $vals['resultInfo'];
      }
    }
  }

  public function getName() {
    return 'TResultConsumeCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->resultInfo = array();
            $_size91 = 0;
            $_etype94 = 0;
            $xfer += $input->readListBegin($_etype94, $_size91);
            for ($_i95 = 0; $_i95 < $_size91; ++$_i95)
            {
              $elem96 = null;
              $elem96 = new \miasrv\coupon\ums\TOrderItem();
              $xfer += $elem96->read($input);
              $this->resultInfo []= $elem96;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultConsumeCoupon');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resultInfo !== null) {
      if (!is_array($this->resultInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('resultInfo', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->resultInfo));
        {
          foreach ($this->resultInfo as $iter97)
          {
            $xfer += $iter97->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponUseRecord {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $couponCode = null;
  /**
   * @var string
   */
  public $orderCode = null;
  /**
   * @var string
   */
  public $useDate = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var bool
   */
  public $isRecovered = null;
  /**
   * @var string
   */
  public $recoveredDate = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'couponCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'orderCode',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'useDate',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'isRecovered',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'recoveredDate',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['couponCode'])) {
        $this->couponCode = $vals['couponCode'];
      }
      if (isset($vals['orderCode'])) {
        $this->orderCode = $vals['orderCode'];
      }
      if (isset($vals['useDate'])) {
        $this->useDate = $vals['useDate'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['isRecovered'])) {
        $this->isRecovered = $vals['isRecovered'];
      }
      if (isset($vals['recoveredDate'])) {
        $this->recoveredDate = $vals['recoveredDate'];
      }
    }
  }

  public function getName() {
    return 'TCouponUseRecord';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->couponCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->useDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isRecovered);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->recoveredDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponUseRecord');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponCode !== null) {
      $xfer += $output->writeFieldBegin('couponCode', TType::STRING, 2);
      $xfer += $output->writeString($this->couponCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderCode !== null) {
      $xfer += $output->writeFieldBegin('orderCode', TType::STRING, 3);
      $xfer += $output->writeString($this->orderCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useDate !== null) {
      $xfer += $output->writeFieldBegin('useDate', TType::STRING, 4);
      $xfer += $output->writeString($this->useDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 5);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isRecovered !== null) {
      $xfer += $output->writeFieldBegin('isRecovered', TType::BOOL, 6);
      $xfer += $output->writeBool($this->isRecovered);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recoveredDate !== null) {
      $xfer += $output->writeFieldBegin('recoveredDate', TType::STRING, 7);
      $xfer += $output->writeString($this->recoveredDate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsQueryCouponUseRecord {
  static $_TSPEC;

  /**
   * @var string
   */
  public $couponCode = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'couponCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['couponCode'])) {
        $this->couponCode = $vals['couponCode'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'TParamsQueryCouponUseRecord';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->couponCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsQueryCouponUseRecord');
    if ($this->couponCode !== null) {
      $xfer += $output->writeFieldBegin('couponCode', TType::STRING, 1);
      $xfer += $output->writeString($this->couponCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultQueryCouponUseRecord {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var \miasrv\coupon\ums\TCouponUseRecord[]
   */
  public $resultInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'resultInfo',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\ums\TCouponUseRecord',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['resultInfo'])) {
        $this->resultInfo = $vals['resultInfo'];
      }
    }
  }

  public function getName() {
    return 'TResultQueryCouponUseRecord';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->resultInfo = array();
            $_size98 = 0;
            $_etype101 = 0;
            $xfer += $input->readListBegin($_etype101, $_size98);
            for ($_i102 = 0; $_i102 < $_size98; ++$_i102)
            {
              $elem103 = null;
              $elem103 = new \miasrv\coupon\ums\TCouponUseRecord();
              $xfer += $elem103->read($input);
              $this->resultInfo []= $elem103;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultQueryCouponUseRecord');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resultInfo !== null) {
      if (!is_array($this->resultInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('resultInfo', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->resultInfo));
        {
          foreach ($this->resultInfo as $iter104)
          {
            $xfer += $iter104->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsBindCouponByCode {
  static $_TSPEC;

  /**
   * @var string
   */
  public $couponCode = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'couponCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['couponCode'])) {
        $this->couponCode = $vals['couponCode'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'TParamsBindCouponByCode';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->couponCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsBindCouponByCode');
    if ($this->couponCode !== null) {
      $xfer += $output->writeFieldBegin('couponCode', TType::STRING, 1);
      $xfer += $output->writeString($this->couponCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultBindCouponByCode {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var int
   */
  public $resultInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'resultInfo',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['resultInfo'])) {
        $this->resultInfo = $vals['resultInfo'];
      }
    }
  }

  public function getName() {
    return 'TResultBindCouponByCode';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resultInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultBindCouponByCode');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resultInfo !== null) {
      $xfer += $output->writeFieldBegin('resultInfo', TType::I32, 5);
      $xfer += $output->writeI32($this->resultInfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsGetCouponBindAndUsedCount {
  static $_TSPEC;

  /**
   * @var int
   */
  public $applyId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'applyId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['applyId'])) {
        $this->applyId = $vals['applyId'];
      }
    }
  }

  public function getName() {
    return 'TParamsGetCouponBindAndUsedCount';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->applyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsGetCouponBindAndUsedCount');
    if ($this->applyId !== null) {
      $xfer += $output->writeFieldBegin('applyId', TType::I32, 1);
      $xfer += $output->writeI32($this->applyId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultGetCouponBindAndUsedCount {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var array
   */
  public $resultInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'resultInfo',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['resultInfo'])) {
        $this->resultInfo = $vals['resultInfo'];
      }
    }
  }

  public function getName() {
    return 'TResultGetCouponBindAndUsedCount';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->resultInfo = array();
            $_size105 = 0;
            $_ktype106 = 0;
            $_vtype107 = 0;
            $xfer += $input->readMapBegin($_ktype106, $_vtype107, $_size105);
            for ($_i109 = 0; $_i109 < $_size105; ++$_i109)
            {
              $key110 = '';
              $val111 = 0;
              $xfer += $input->readString($key110);
              $xfer += $input->readI32($val111);
              $this->resultInfo[$key110] = $val111;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultGetCouponBindAndUsedCount');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resultInfo !== null) {
      if (!is_array($this->resultInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('resultInfo', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->resultInfo));
        {
          foreach ($this->resultInfo as $kiter112 => $viter113)
          {
            $xfer += $output->writeString($kiter112);
            $xfer += $output->writeI32($viter113);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsGetCouponDayUsedCount {
  static $_TSPEC;

  /**
   * @var int
   */
  public $applyId = null;
  /**
   * @var int
   */
  public $pageNo = null;
  /**
   * @var int
   */
  public $pageSize = null;
  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $endTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'applyId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'startTime',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'endTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['applyId'])) {
        $this->applyId = $vals['applyId'];
      }
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
    }
  }

  public function getName() {
    return 'TParamsGetCouponDayUsedCount';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->applyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsGetCouponDayUsedCount');
    if ($this->applyId !== null) {
      $xfer += $output->writeFieldBegin('applyId', TType::I32, 1);
      $xfer += $output->writeI32($this->applyId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 2);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 3);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 4);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 5);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultGetCouponDayUsedCount {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var int
   */
  public $total = null;
  /**
   * @var int
   */
  public $pageNo = null;
  /**
   * @var int
   */
  public $pageSize = null;
  /**
   * @var array
   */
  public $pageList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'pageList',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['pageList'])) {
        $this->pageList = $vals['pageList'];
      }
    }
  }

  public function getName() {
    return 'TResultGetCouponDayUsedCount';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::MAP) {
            $this->pageList = array();
            $_size114 = 0;
            $_ktype115 = 0;
            $_vtype116 = 0;
            $xfer += $input->readMapBegin($_ktype115, $_vtype116, $_size114);
            for ($_i118 = 0; $_i118 < $_size114; ++$_i118)
            {
              $key119 = '';
              $val120 = array();
              $xfer += $input->readString($key119);
              $val120 = array();
              $_size121 = 0;
              $_etype124 = 0;
              $xfer += $input->readListBegin($_etype124, $_size121);
              for ($_i125 = 0; $_i125 < $_size121; ++$_i125)
              {
                $elem126 = null;
                $xfer += $input->readString($elem126);
                $val120 []= $elem126;
              }
              $xfer += $input->readListEnd();
              $this->pageList[$key119] = $val120;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultGetCouponDayUsedCount');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 5);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 6);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 7);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageList !== null) {
      if (!is_array($this->pageList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pageList', TType::MAP, 8);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->pageList));
        {
          foreach ($this->pageList as $kiter127 => $viter128)
          {
            $xfer += $output->writeString($kiter127);
            {
              $output->writeListBegin(TType::STRING, count($viter128));
              {
                foreach ($viter128 as $iter129)
                {
                  $xfer += $output->writeString($iter129);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsUpdatePromotionCouponStatus {
  static $_TSPEC;

  /**
   * @var int
   */
  public $applyId = null;
  /**
   * @var int
   */
  public $couponStatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'applyId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'couponStatus',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['applyId'])) {
        $this->applyId = $vals['applyId'];
      }
      if (isset($vals['couponStatus'])) {
        $this->couponStatus = $vals['couponStatus'];
      }
    }
  }

  public function getName() {
    return 'TParamsUpdatePromotionCouponStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->applyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->couponStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsUpdatePromotionCouponStatus');
    if ($this->applyId !== null) {
      $xfer += $output->writeFieldBegin('applyId', TType::I32, 1);
      $xfer += $output->writeI32($this->applyId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponStatus !== null) {
      $xfer += $output->writeFieldBegin('couponStatus', TType::I32, 2);
      $xfer += $output->writeI32($this->couponStatus);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultUpdatePromotionCouponStatus {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var int
   */
  public $resultInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'resultInfo',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['resultInfo'])) {
        $this->resultInfo = $vals['resultInfo'];
      }
    }
  }

  public function getName() {
    return 'TResultUpdatePromotionCouponStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resultInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultUpdatePromotionCouponStatus');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resultInfo !== null) {
      $xfer += $output->writeFieldBegin('resultInfo', TType::I32, 5);
      $xfer += $output->writeI32($this->resultInfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsModifySupplierPro {
  static $_TSPEC;

  /**
   * @var double
   */
  public $supplierPro = null;
  /**
   * @var int
   */
  public $supplierId = null;
  /**
   * @var string
   */
  public $batchCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'supplierPro',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'supplierId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'batchCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['supplierPro'])) {
        $this->supplierPro = $vals['supplierPro'];
      }
      if (isset($vals['supplierId'])) {
        $this->supplierId = $vals['supplierId'];
      }
      if (isset($vals['batchCode'])) {
        $this->batchCode = $vals['batchCode'];
      }
    }
  }

  public function getName() {
    return 'TParamsModifySupplierPro';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->supplierPro);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->supplierId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsModifySupplierPro');
    if ($this->supplierPro !== null) {
      $xfer += $output->writeFieldBegin('supplierPro', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->supplierPro);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierId !== null) {
      $xfer += $output->writeFieldBegin('supplierId', TType::I32, 2);
      $xfer += $output->writeI32($this->supplierId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchCode !== null) {
      $xfer += $output->writeFieldBegin('batchCode', TType::STRING, 3);
      $xfer += $output->writeString($this->batchCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultModifySupplierPro {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var int
   */
  public $resultInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'resultInfo',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['resultInfo'])) {
        $this->resultInfo = $vals['resultInfo'];
      }
    }
  }

  public function getName() {
    return 'TResultModifySupplierPro';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resultInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultModifySupplierPro');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resultInfo !== null) {
      $xfer += $output->writeFieldBegin('resultInfo', TType::I32, 5);
      $xfer += $output->writeI32($this->resultInfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsAddSupplierPro {
  static $_TSPEC;

  /**
   * @var double
   */
  public $supplierPro = null;
  /**
   * @var int
   */
  public $supplierId = null;
  /**
   * @var string
   */
  public $batchCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'supplierPro',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'supplierId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'batchCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['supplierPro'])) {
        $this->supplierPro = $vals['supplierPro'];
      }
      if (isset($vals['supplierId'])) {
        $this->supplierId = $vals['supplierId'];
      }
      if (isset($vals['batchCode'])) {
        $this->batchCode = $vals['batchCode'];
      }
    }
  }

  public function getName() {
    return 'TParamsAddSupplierPro';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->supplierPro);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->supplierId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsAddSupplierPro');
    if ($this->supplierPro !== null) {
      $xfer += $output->writeFieldBegin('supplierPro', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->supplierPro);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplierId !== null) {
      $xfer += $output->writeFieldBegin('supplierId', TType::I32, 2);
      $xfer += $output->writeI32($this->supplierId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchCode !== null) {
      $xfer += $output->writeFieldBegin('batchCode', TType::STRING, 3);
      $xfer += $output->writeString($this->batchCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultAddSupplierPro {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var int
   */
  public $resultInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'resultInfo',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['resultInfo'])) {
        $this->resultInfo = $vals['resultInfo'];
      }
    }
  }

  public function getName() {
    return 'TResultAddSupplierPro';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resultInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultAddSupplierPro');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resultInfo !== null) {
      $xfer += $output->writeFieldBegin('resultInfo', TType::I32, 5);
      $xfer += $output->writeI32($this->resultInfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsDeleteSupplierPro {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'TParamsDeleteSupplierPro';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsDeleteSupplierPro');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultDeleteSupplierPro {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var int
   */
  public $resultInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'resultInfo',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['resultInfo'])) {
        $this->resultInfo = $vals['resultInfo'];
      }
    }
  }

  public function getName() {
    return 'TResultDeleteSupplierPro';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resultInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultDeleteSupplierPro');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resultInfo !== null) {
      $xfer += $output->writeFieldBegin('resultInfo', TType::I32, 5);
      $xfer += $output->writeI32($this->resultInfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


