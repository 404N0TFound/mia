<?php
namespace miasrv\coupon\api;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class TUserCouponStatus {
  const NoUse = 1;
  const Used = 2;
  const Expired = 3;
  static public $__names = array(
    1 => 'NoUse',
    2 => 'Used',
    3 => 'Expired',
  );
}

class TCoupon {
  static $_TSPEC;

  /**
   * @var string
   */
  public $couponCode = null;
  /**
   * @var double
   */
  public $value = null;
  /**
   * @var double
   */
  public $minPrice = null;
  /**
   * @var string
   */
  public $useRang = null;
  /**
   * @var string
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $expireTime = null;
  /**
   * @var string
   */
  public $bindTime = null;
  /**
   * @var int
   */
  public $bindUserId = null;
  /**
   * @var int
   */
  public $timeValidType = null;
  /**
   * @var int
   */
  public $validDay = null;
  /**
   * @var int
   */
  public $businessType = null;
  /**
   * @var int
   */
  public $businessId = null;
  /**
   * @var int
   */
  public $isPassword = null;
  /**
   * @var string
   */
  public $password_code = null;
  /**
   * @var int
   */
  public $isUsable = null;
  /**
   * @var string
   */
  public $unuseableMsg = null;
  /**
   * @var int
   */
  public $leftUseNum = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var string
   */
  public $useStartTime = null;
  /**
   * @var string
   */
  public $useEndTime = null;
  /**
   * @var string
   */
  public $batchCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'couponCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'minPrice',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'useRang',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'startTime',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'expireTime',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'bindTime',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'bindUserId',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'timeValidType',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'validDay',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'businessType',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'businessId',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'isPassword',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'password_code',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'isUsable',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'unuseableMsg',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'leftUseNum',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'useStartTime',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'useEndTime',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'batchCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['couponCode'])) {
        $this->couponCode = $vals['couponCode'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['minPrice'])) {
        $this->minPrice = $vals['minPrice'];
      }
      if (isset($vals['useRang'])) {
        $this->useRang = $vals['useRang'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['expireTime'])) {
        $this->expireTime = $vals['expireTime'];
      }
      if (isset($vals['bindTime'])) {
        $this->bindTime = $vals['bindTime'];
      }
      if (isset($vals['bindUserId'])) {
        $this->bindUserId = $vals['bindUserId'];
      }
      if (isset($vals['timeValidType'])) {
        $this->timeValidType = $vals['timeValidType'];
      }
      if (isset($vals['validDay'])) {
        $this->validDay = $vals['validDay'];
      }
      if (isset($vals['businessType'])) {
        $this->businessType = $vals['businessType'];
      }
      if (isset($vals['businessId'])) {
        $this->businessId = $vals['businessId'];
      }
      if (isset($vals['isPassword'])) {
        $this->isPassword = $vals['isPassword'];
      }
      if (isset($vals['password_code'])) {
        $this->password_code = $vals['password_code'];
      }
      if (isset($vals['isUsable'])) {
        $this->isUsable = $vals['isUsable'];
      }
      if (isset($vals['unuseableMsg'])) {
        $this->unuseableMsg = $vals['unuseableMsg'];
      }
      if (isset($vals['leftUseNum'])) {
        $this->leftUseNum = $vals['leftUseNum'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['useStartTime'])) {
        $this->useStartTime = $vals['useStartTime'];
      }
      if (isset($vals['useEndTime'])) {
        $this->useEndTime = $vals['useEndTime'];
      }
      if (isset($vals['batchCode'])) {
        $this->batchCode = $vals['batchCode'];
      }
    }
  }

  public function getName() {
    return 'TCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->couponCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->minPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->useRang);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expireTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bindTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bindUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timeValidType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->validDay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->businessType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->businessId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isPassword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isUsable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->unuseableMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->leftUseNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->useStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->useEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCoupon');
    if ($this->couponCode !== null) {
      $xfer += $output->writeFieldBegin('couponCode', TType::STRING, 1);
      $xfer += $output->writeString($this->couponCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minPrice !== null) {
      $xfer += $output->writeFieldBegin('minPrice', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->minPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useRang !== null) {
      $xfer += $output->writeFieldBegin('useRang', TType::STRING, 4);
      $xfer += $output->writeString($this->useRang);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 5);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTime !== null) {
      $xfer += $output->writeFieldBegin('expireTime', TType::STRING, 6);
      $xfer += $output->writeString($this->expireTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bindTime !== null) {
      $xfer += $output->writeFieldBegin('bindTime', TType::STRING, 7);
      $xfer += $output->writeString($this->bindTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bindUserId !== null) {
      $xfer += $output->writeFieldBegin('bindUserId', TType::I32, 8);
      $xfer += $output->writeI32($this->bindUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeValidType !== null) {
      $xfer += $output->writeFieldBegin('timeValidType', TType::I32, 9);
      $xfer += $output->writeI32($this->timeValidType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validDay !== null) {
      $xfer += $output->writeFieldBegin('validDay', TType::I32, 10);
      $xfer += $output->writeI32($this->validDay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->businessType !== null) {
      $xfer += $output->writeFieldBegin('businessType', TType::I32, 11);
      $xfer += $output->writeI32($this->businessType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->businessId !== null) {
      $xfer += $output->writeFieldBegin('businessId', TType::I32, 12);
      $xfer += $output->writeI32($this->businessId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isPassword !== null) {
      $xfer += $output->writeFieldBegin('isPassword', TType::I32, 13);
      $xfer += $output->writeI32($this->isPassword);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password_code !== null) {
      $xfer += $output->writeFieldBegin('password_code', TType::STRING, 14);
      $xfer += $output->writeString($this->password_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isUsable !== null) {
      $xfer += $output->writeFieldBegin('isUsable', TType::I32, 15);
      $xfer += $output->writeI32($this->isUsable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unuseableMsg !== null) {
      $xfer += $output->writeFieldBegin('unuseableMsg', TType::STRING, 16);
      $xfer += $output->writeString($this->unuseableMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->leftUseNum !== null) {
      $xfer += $output->writeFieldBegin('leftUseNum', TType::I32, 17);
      $xfer += $output->writeI32($this->leftUseNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 18);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useStartTime !== null) {
      $xfer += $output->writeFieldBegin('useStartTime', TType::STRING, 19);
      $xfer += $output->writeString($this->useStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useEndTime !== null) {
      $xfer += $output->writeFieldBegin('useEndTime', TType::STRING, 20);
      $xfer += $output->writeString($this->useEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchCode !== null) {
      $xfer += $output->writeFieldBegin('batchCode', TType::STRING, 21);
      $xfer += $output->writeString($this->batchCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponBind {
  static $_TSPEC;

  /**
   * @var string
   */
  public $batchCode = null;
  /**
   * @var int
   */
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batchCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['batchCode'])) {
        $this->batchCode = $vals['batchCode'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'TCouponBind';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponBind');
    if ($this->batchCode !== null) {
      $xfer += $output->writeFieldBegin('batchCode', TType::STRING, 1);
      $xfer += $output->writeString($this->batchCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsQueryUserCoupon {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $pageNo = null;
  /**
   * @var int
   */
  public $pageSize = null;
  /**
   * @var bool
   */
  public $isOrder = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'isOrder',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['isOrder'])) {
        $this->isOrder = $vals['isOrder'];
      }
    }
  }

  public function getName() {
    return 'TParamsQueryUserCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isOrder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsQueryUserCoupon');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 2);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 3);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 4);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isOrder !== null) {
      $xfer += $output->writeFieldBegin('isOrder', TType::BOOL, 5);
      $xfer += $output->writeBool($this->isOrder);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultQueryUserCoupon {
  static $_TSPEC;

  /**
   * @var \miasrv\common\TErrorInfo
   */
  public $errorInfo = null;
  /**
   * @var \miasrv\coupon\api\TCoupon[]
   */
  public $pageList = null;
  /**
   * @var int
   */
  public $total = null;
  /**
   * @var int
   */
  public $pageNo = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errorInfo',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\TErrorInfo',
          ),
        2 => array(
          'var' => 'pageList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\api\TCoupon',
            ),
          ),
        3 => array(
          'var' => 'total',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['errorInfo'])) {
        $this->errorInfo = $vals['errorInfo'];
      }
      if (isset($vals['pageList'])) {
        $this->pageList = $vals['pageList'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
    }
  }

  public function getName() {
    return 'TResultQueryUserCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->errorInfo = new \miasrv\common\TErrorInfo();
            $xfer += $this->errorInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->pageList = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \miasrv\coupon\api\TCoupon();
              $xfer += $elem5->read($input);
              $this->pageList []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultQueryUserCoupon');
    if ($this->errorInfo !== null) {
      if (!is_object($this->errorInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('errorInfo', TType::STRUCT, 1);
      $xfer += $this->errorInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageList !== null) {
      if (!is_array($this->pageList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pageList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->pageList));
        {
          foreach ($this->pageList as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I64, 3);
      $xfer += $output->writeI64($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 4);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 5);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsBindCouponByBatchCode {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var \miasrv\coupon\api\TCouponBind[]
   */
  public $tCouponBinds = null;
  /**
   * @var string
   */
  public $opUser = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'tCouponBinds',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\api\TCouponBind',
            ),
          ),
        3 => array(
          'var' => 'opUser',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['tCouponBinds'])) {
        $this->tCouponBinds = $vals['tCouponBinds'];
      }
      if (isset($vals['opUser'])) {
        $this->opUser = $vals['opUser'];
      }
    }
  }

  public function getName() {
    return 'TParamsBindCouponByBatchCode';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->tCouponBinds = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \miasrv\coupon\api\TCouponBind();
              $xfer += $elem12->read($input);
              $this->tCouponBinds []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->opUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsBindCouponByBatchCode');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tCouponBinds !== null) {
      if (!is_array($this->tCouponBinds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tCouponBinds', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->tCouponBinds));
        {
          foreach ($this->tCouponBinds as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opUser !== null) {
      $xfer += $output->writeFieldBegin('opUser', TType::STRING, 3);
      $xfer += $output->writeString($this->opUser);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsBindCouponByCode {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var string
   */
  public $code = null;
  /**
   * @var string
   */
  public $opUser = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'opUser',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['opUser'])) {
        $this->opUser = $vals['opUser'];
      }
    }
  }

  public function getName() {
    return 'TParamsBindCouponByCode';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->opUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsBindCouponByCode');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::STRING, 2);
      $xfer += $output->writeString($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opUser !== null) {
      $xfer += $output->writeFieldBegin('opUser', TType::STRING, 3);
      $xfer += $output->writeString($this->opUser);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultBindCouponByBatchCode {
  static $_TSPEC;

  /**
   * @var array
   */
  public $errorMap = null;
  /**
   * @var string[]
   */
  public $successBatchCode = null;
  /**
   * @var string[]
   */
  public $couponCodes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errorMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\common\TErrorInfo',
            ),
          ),
        2 => array(
          'var' => 'successBatchCode',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'couponCodes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['errorMap'])) {
        $this->errorMap = $vals['errorMap'];
      }
      if (isset($vals['successBatchCode'])) {
        $this->successBatchCode = $vals['successBatchCode'];
      }
      if (isset($vals['couponCodes'])) {
        $this->couponCodes = $vals['couponCodes'];
      }
    }
  }

  public function getName() {
    return 'TResultBindCouponByBatchCode';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->errorMap = array();
            $_size14 = 0;
            $_ktype15 = 0;
            $_vtype16 = 0;
            $xfer += $input->readMapBegin($_ktype15, $_vtype16, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $key19 = '';
              $val20 = new \miasrv\common\TErrorInfo();
              $xfer += $input->readString($key19);
              $val20 = new \miasrv\common\TErrorInfo();
              $xfer += $val20->read($input);
              $this->errorMap[$key19] = $val20;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->successBatchCode = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $xfer += $input->readString($elem26);
              $this->successBatchCode []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->couponCodes = array();
            $_size27 = 0;
            $_etype30 = 0;
            $xfer += $input->readListBegin($_etype30, $_size27);
            for ($_i31 = 0; $_i31 < $_size27; ++$_i31)
            {
              $elem32 = null;
              $xfer += $input->readString($elem32);
              $this->couponCodes []= $elem32;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultBindCouponByBatchCode');
    if ($this->errorMap !== null) {
      if (!is_array($this->errorMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('errorMap', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->errorMap));
        {
          foreach ($this->errorMap as $kiter33 => $viter34)
          {
            $xfer += $output->writeString($kiter33);
            $xfer += $viter34->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->successBatchCode !== null) {
      if (!is_array($this->successBatchCode)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('successBatchCode', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->successBatchCode));
        {
          foreach ($this->successBatchCode as $iter35)
          {
            $xfer += $output->writeString($iter35);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponCodes !== null) {
      if (!is_array($this->couponCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('couponCodes', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->couponCodes));
        {
          foreach ($this->couponCodes as $iter36)
          {
            $xfer += $output->writeString($iter36);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultBindCouponByCode {
  static $_TSPEC;

  /**
   * @var int
   */
  public $resultInfo = null;
  /**
   * @var \miasrv\common\TErrorInfo
   */
  public $errorInfo = null;
  /**
   * @var string
   */
  public $couponCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'resultInfo',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errorInfo',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\TErrorInfo',
          ),
        3 => array(
          'var' => 'couponCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['resultInfo'])) {
        $this->resultInfo = $vals['resultInfo'];
      }
      if (isset($vals['errorInfo'])) {
        $this->errorInfo = $vals['errorInfo'];
      }
      if (isset($vals['couponCode'])) {
        $this->couponCode = $vals['couponCode'];
      }
    }
  }

  public function getName() {
    return 'TResultBindCouponByCode';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resultInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->errorInfo = new \miasrv\common\TErrorInfo();
            $xfer += $this->errorInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->couponCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultBindCouponByCode');
    if ($this->resultInfo !== null) {
      $xfer += $output->writeFieldBegin('resultInfo', TType::I32, 1);
      $xfer += $output->writeI32($this->resultInfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorInfo !== null) {
      if (!is_object($this->errorInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('errorInfo', TType::STRUCT, 2);
      $xfer += $this->errorInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponCode !== null) {
      $xfer += $output->writeFieldBegin('couponCode', TType::STRING, 3);
      $xfer += $output->writeString($this->couponCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsRecoverCoupon {
  static $_TSPEC;

  /**
   * @var string
   */
  public $superiorOrderCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'superiorOrderCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['superiorOrderCode'])) {
        $this->superiorOrderCode = $vals['superiorOrderCode'];
      }
    }
  }

  public function getName() {
    return 'TParamsRecoverCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->superiorOrderCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsRecoverCoupon');
    if ($this->superiorOrderCode !== null) {
      $xfer += $output->writeFieldBegin('superiorOrderCode', TType::STRING, 1);
      $xfer += $output->writeString($this->superiorOrderCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultRecoverCoupon {
  static $_TSPEC;

  /**
   * @var int
   */
  public $resultInfo = null;
  /**
   * @var \miasrv\common\TErrorInfo
   */
  public $errorInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'resultInfo',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errorInfo',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\TErrorInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['resultInfo'])) {
        $this->resultInfo = $vals['resultInfo'];
      }
      if (isset($vals['errorInfo'])) {
        $this->errorInfo = $vals['errorInfo'];
      }
    }
  }

  public function getName() {
    return 'TResultRecoverCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resultInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->errorInfo = new \miasrv\common\TErrorInfo();
            $xfer += $this->errorInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultRecoverCoupon');
    if ($this->resultInfo !== null) {
      $xfer += $output->writeFieldBegin('resultInfo', TType::I32, 1);
      $xfer += $output->writeI32($this->resultInfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorInfo !== null) {
      if (!is_object($this->errorInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('errorInfo', TType::STRUCT, 2);
      $xfer += $this->errorInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsRemainCoupon {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $batchCodes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batchCodes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['batchCodes'])) {
        $this->batchCodes = $vals['batchCodes'];
      }
    }
  }

  public function getName() {
    return 'TParamsRemainCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->batchCodes = array();
            $_size37 = 0;
            $_etype40 = 0;
            $xfer += $input->readListBegin($_etype40, $_size37);
            for ($_i41 = 0; $_i41 < $_size37; ++$_i41)
            {
              $elem42 = null;
              $xfer += $input->readString($elem42);
              $this->batchCodes []= $elem42;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsRemainCoupon');
    if ($this->batchCodes !== null) {
      if (!is_array($this->batchCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('batchCodes', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->batchCodes));
        {
          foreach ($this->batchCodes as $iter43)
          {
            $xfer += $output->writeString($iter43);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultRemainCoupon {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var \miasrv\coupon\api\CouponRemain[]
   */
  public $remains = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'remains',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\api\CouponRemain',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['remains'])) {
        $this->remains = $vals['remains'];
      }
    }
  }

  public function getName() {
    return 'TResultRemainCoupon';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->remains = array();
            $_size44 = 0;
            $_etype47 = 0;
            $xfer += $input->readListBegin($_etype47, $_size44);
            for ($_i48 = 0; $_i48 < $_size44; ++$_i48)
            {
              $elem49 = null;
              $elem49 = new \miasrv\coupon\api\CouponRemain();
              $xfer += $elem49->read($input);
              $this->remains []= $elem49;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultRemainCoupon');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 2);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remains !== null) {
      if (!is_array($this->remains)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('remains', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->remains));
        {
          foreach ($this->remains as $iter50)
          {
            $xfer += $iter50->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CouponRemain {
  static $_TSPEC;

  /**
   * @var string
   */
  public $batchCode = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $total = null;
  /**
   * @var int
   */
  public $remain = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batchCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'remain',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['batchCode'])) {
        $this->batchCode = $vals['batchCode'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['remain'])) {
        $this->remain = $vals['remain'];
      }
    }
  }

  public function getName() {
    return 'CouponRemain';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->remain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CouponRemain');
    if ($this->batchCode !== null) {
      $xfer += $output->writeFieldBegin('batchCode', TType::STRING, 1);
      $xfer += $output->writeString($this->batchCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 3);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remain !== null) {
      $xfer += $output->writeFieldBegin('remain', TType::I32, 4);
      $xfer += $output->writeI32($this->remain);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultQueryCouponDetailInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var array
   */
  public $couponInfoMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'couponInfoMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\api\TCoupon',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['couponInfoMap'])) {
        $this->couponInfoMap = $vals['couponInfoMap'];
      }
    }
  }

  public function getName() {
    return 'TResultQueryCouponDetailInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->couponInfoMap = array();
            $_size51 = 0;
            $_ktype52 = 0;
            $_vtype53 = 0;
            $xfer += $input->readMapBegin($_ktype52, $_vtype53, $_size51);
            for ($_i55 = 0; $_i55 < $_size51; ++$_i55)
            {
              $key56 = '';
              $val57 = new \miasrv\coupon\api\TCoupon();
              $xfer += $input->readString($key56);
              $val57 = new \miasrv\coupon\api\TCoupon();
              $xfer += $val57->read($input);
              $this->couponInfoMap[$key56] = $val57;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultQueryCouponDetailInfo');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 2);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponInfoMap !== null) {
      if (!is_array($this->couponInfoMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('couponInfoMap', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->couponInfoMap));
        {
          foreach ($this->couponInfoMap as $kiter58 => $viter59)
          {
            $xfer += $output->writeString($kiter58);
            $xfer += $viter59->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsQueryCouponDetailInfo {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $couponCodes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'couponCodes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['couponCodes'])) {
        $this->couponCodes = $vals['couponCodes'];
      }
    }
  }

  public function getName() {
    return 'TParamsQueryCouponDetailInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->couponCodes = array();
            $_size60 = 0;
            $_etype63 = 0;
            $xfer += $input->readListBegin($_etype63, $_size60);
            for ($_i64 = 0; $_i64 < $_size60; ++$_i64)
            {
              $elem65 = null;
              $xfer += $input->readString($elem65);
              $this->couponCodes []= $elem65;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsQueryCouponDetailInfo');
    if ($this->couponCodes !== null) {
      if (!is_array($this->couponCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('couponCodes', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->couponCodes));
        {
          foreach ($this->couponCodes as $iter66)
          {
            $xfer += $output->writeString($iter66);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultQueryUserCouponByBatchCode {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var \miasrv\coupon\api\TCoupon[]
   */
  public $couponList = null;
  /**
   * @var int
   */
  public $pageNo = null;
  /**
   * @var int
   */
  public $pageSize = null;
  /**
   * @var int
   */
  public $totalCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'couponList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\api\TCoupon',
            ),
          ),
        6 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'totalCount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['couponList'])) {
        $this->couponList = $vals['couponList'];
      }
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['totalCount'])) {
        $this->totalCount = $vals['totalCount'];
      }
    }
  }

  public function getName() {
    return 'TResultQueryUserCouponByBatchCode';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->couponList = array();
            $_size67 = 0;
            $_etype70 = 0;
            $xfer += $input->readListBegin($_etype70, $_size67);
            for ($_i71 = 0; $_i71 < $_size67; ++$_i71)
            {
              $elem72 = null;
              $elem72 = new \miasrv\coupon\api\TCoupon();
              $xfer += $elem72->read($input);
              $this->couponList []= $elem72;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultQueryUserCouponByBatchCode');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 2);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponList !== null) {
      if (!is_array($this->couponList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('couponList', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->couponList));
        {
          foreach ($this->couponList as $iter73)
          {
            $xfer += $iter73->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 6);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 7);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalCount !== null) {
      $xfer += $output->writeFieldBegin('totalCount', TType::I32, 8);
      $xfer += $output->writeI32($this->totalCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsQueryUserCouponByBatchCode {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string[]
   */
  public $batchCodes = null;
  /**
   * @var int
   */
  public $pageNo = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'batchCodes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['batchCodes'])) {
        $this->batchCodes = $vals['batchCodes'];
      }
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
    }
  }

  public function getName() {
    return 'TParamsQueryUserCouponByBatchCode';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->batchCodes = array();
            $_size74 = 0;
            $_etype77 = 0;
            $xfer += $input->readListBegin($_etype77, $_size74);
            for ($_i78 = 0; $_i78 < $_size74; ++$_i78)
            {
              $elem79 = null;
              $xfer += $input->readString($elem79);
              $this->batchCodes []= $elem79;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsQueryUserCouponByBatchCode');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchCodes !== null) {
      if (!is_array($this->batchCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('batchCodes', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->batchCodes));
        {
          foreach ($this->batchCodes as $iter80)
          {
            $xfer += $output->writeString($iter80);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 3);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 4);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponBatchInfo {
  static $_TSPEC;

  /**
   * @var string
   */
  public $batchCode = null;
  /**
   * @var int
   */
  public $applyId = null;
  /**
   * @var double
   */
  public $value = null;
  /**
   * @var double
   */
  public $minPrice = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $useNum = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $generateAmount = null;
  /**
   * @var string
   */
  public $useRang = null;
  /**
   * @var int
   */
  public $businessType = null;
  /**
   * @var int
   */
  public $businessId = null;
  /**
   * @var int
   */
  public $couponStatus = null;
  /**
   * @var string
   */
  public $insertDate = null;
  /**
   * @var int
   */
  public $isPassword = null;
  /**
   * @var string
   */
  public $passwordCode = null;
  /**
   * @var int
   */
  public $timeValidType = null;
  /**
   * @var int
   */
  public $validDay = null;
  /**
   * @var string
   */
  public $startTimestamp = null;
  /**
   * @var string
   */
  public $expireTimestamp = null;
  /**
   * @var string
   */
  public $receiveStartDate = null;
  /**
   * @var string
   */
  public $receiveEndDate = null;
  /**
   * @var int
   */
  public $receiveTotalLimit = null;
  /**
   * @var int
   */
  public $generateType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batchCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'applyId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'value',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'minPrice',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'useNum',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'generateAmount',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'useRang',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'businessType',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'businessId',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'couponStatus',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'insertDate',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'isPassword',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'passwordCode',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'timeValidType',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'validDay',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'startTimestamp',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'expireTimestamp',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'receiveStartDate',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'receiveEndDate',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'receiveTotalLimit',
          'type' => TType::I32,
          ),
        23 => array(
          'var' => 'generateType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['batchCode'])) {
        $this->batchCode = $vals['batchCode'];
      }
      if (isset($vals['applyId'])) {
        $this->applyId = $vals['applyId'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['minPrice'])) {
        $this->minPrice = $vals['minPrice'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['useNum'])) {
        $this->useNum = $vals['useNum'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['generateAmount'])) {
        $this->generateAmount = $vals['generateAmount'];
      }
      if (isset($vals['useRang'])) {
        $this->useRang = $vals['useRang'];
      }
      if (isset($vals['businessType'])) {
        $this->businessType = $vals['businessType'];
      }
      if (isset($vals['businessId'])) {
        $this->businessId = $vals['businessId'];
      }
      if (isset($vals['couponStatus'])) {
        $this->couponStatus = $vals['couponStatus'];
      }
      if (isset($vals['insertDate'])) {
        $this->insertDate = $vals['insertDate'];
      }
      if (isset($vals['isPassword'])) {
        $this->isPassword = $vals['isPassword'];
      }
      if (isset($vals['passwordCode'])) {
        $this->passwordCode = $vals['passwordCode'];
      }
      if (isset($vals['timeValidType'])) {
        $this->timeValidType = $vals['timeValidType'];
      }
      if (isset($vals['validDay'])) {
        $this->validDay = $vals['validDay'];
      }
      if (isset($vals['startTimestamp'])) {
        $this->startTimestamp = $vals['startTimestamp'];
      }
      if (isset($vals['expireTimestamp'])) {
        $this->expireTimestamp = $vals['expireTimestamp'];
      }
      if (isset($vals['receiveStartDate'])) {
        $this->receiveStartDate = $vals['receiveStartDate'];
      }
      if (isset($vals['receiveEndDate'])) {
        $this->receiveEndDate = $vals['receiveEndDate'];
      }
      if (isset($vals['receiveTotalLimit'])) {
        $this->receiveTotalLimit = $vals['receiveTotalLimit'];
      }
      if (isset($vals['generateType'])) {
        $this->generateType = $vals['generateType'];
      }
    }
  }

  public function getName() {
    return 'TCouponBatchInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->applyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->minPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->useNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->generateAmount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->useRang);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->businessType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->businessId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->couponStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->insertDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isPassword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passwordCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timeValidType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->validDay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTimestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expireTimestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiveStartDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiveEndDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->receiveTotalLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->generateType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponBatchInfo');
    if ($this->batchCode !== null) {
      $xfer += $output->writeFieldBegin('batchCode', TType::STRING, 1);
      $xfer += $output->writeString($this->batchCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyId !== null) {
      $xfer += $output->writeFieldBegin('applyId', TType::I32, 2);
      $xfer += $output->writeI32($this->applyId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minPrice !== null) {
      $xfer += $output->writeFieldBegin('minPrice', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->minPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 5);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useNum !== null) {
      $xfer += $output->writeFieldBegin('useNum', TType::I32, 6);
      $xfer += $output->writeI32($this->useNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 7);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->generateAmount !== null) {
      $xfer += $output->writeFieldBegin('generateAmount', TType::I32, 8);
      $xfer += $output->writeI32($this->generateAmount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useRang !== null) {
      $xfer += $output->writeFieldBegin('useRang', TType::STRING, 9);
      $xfer += $output->writeString($this->useRang);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->businessType !== null) {
      $xfer += $output->writeFieldBegin('businessType', TType::I32, 10);
      $xfer += $output->writeI32($this->businessType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->businessId !== null) {
      $xfer += $output->writeFieldBegin('businessId', TType::I32, 11);
      $xfer += $output->writeI32($this->businessId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponStatus !== null) {
      $xfer += $output->writeFieldBegin('couponStatus', TType::I32, 12);
      $xfer += $output->writeI32($this->couponStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->insertDate !== null) {
      $xfer += $output->writeFieldBegin('insertDate', TType::STRING, 13);
      $xfer += $output->writeString($this->insertDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isPassword !== null) {
      $xfer += $output->writeFieldBegin('isPassword', TType::I32, 14);
      $xfer += $output->writeI32($this->isPassword);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->passwordCode !== null) {
      $xfer += $output->writeFieldBegin('passwordCode', TType::STRING, 15);
      $xfer += $output->writeString($this->passwordCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeValidType !== null) {
      $xfer += $output->writeFieldBegin('timeValidType', TType::I32, 16);
      $xfer += $output->writeI32($this->timeValidType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validDay !== null) {
      $xfer += $output->writeFieldBegin('validDay', TType::I32, 17);
      $xfer += $output->writeI32($this->validDay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTimestamp !== null) {
      $xfer += $output->writeFieldBegin('startTimestamp', TType::STRING, 18);
      $xfer += $output->writeString($this->startTimestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTimestamp !== null) {
      $xfer += $output->writeFieldBegin('expireTimestamp', TType::STRING, 19);
      $xfer += $output->writeString($this->expireTimestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiveStartDate !== null) {
      $xfer += $output->writeFieldBegin('receiveStartDate', TType::STRING, 20);
      $xfer += $output->writeString($this->receiveStartDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiveEndDate !== null) {
      $xfer += $output->writeFieldBegin('receiveEndDate', TType::STRING, 21);
      $xfer += $output->writeString($this->receiveEndDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiveTotalLimit !== null) {
      $xfer += $output->writeFieldBegin('receiveTotalLimit', TType::I32, 22);
      $xfer += $output->writeI32($this->receiveTotalLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->generateType !== null) {
      $xfer += $output->writeFieldBegin('generateType', TType::I32, 23);
      $xfer += $output->writeI32($this->generateType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TParamsQueryCouponInfoList {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $batchCodes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batchCodes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['batchCodes'])) {
        $this->batchCodes = $vals['batchCodes'];
      }
    }
  }

  public function getName() {
    return 'TParamsQueryCouponInfoList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->batchCodes = array();
            $_size81 = 0;
            $_etype84 = 0;
            $xfer += $input->readListBegin($_etype84, $_size81);
            for ($_i85 = 0; $_i85 < $_size81; ++$_i85)
            {
              $elem86 = null;
              $xfer += $input->readString($elem86);
              $this->batchCodes []= $elem86;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TParamsQueryCouponInfoList');
    if ($this->batchCodes !== null) {
      if (!is_array($this->batchCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('batchCodes', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->batchCodes));
        {
          foreach ($this->batchCodes as $iter87)
          {
            $xfer += $output->writeString($iter87);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TResultQueryCouponInfoList {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var string
   */
  public $alert = null;
  /**
   * @var string
   */
  public $requestId = null;
  /**
   * @var \miasrv\coupon\api\TCouponBatchInfo[]
   */
  public $pageList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alert',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'pageList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\miasrv\coupon\api\TCouponBatchInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['alert'])) {
        $this->alert = $vals['alert'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
      if (isset($vals['pageList'])) {
        $this->pageList = $vals['pageList'];
      }
    }
  }

  public function getName() {
    return 'TResultQueryCouponInfoList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alert);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->pageList = array();
            $_size88 = 0;
            $_etype91 = 0;
            $xfer += $input->readListBegin($_etype91, $_size88);
            for ($_i92 = 0; $_i92 < $_size88; ++$_i92)
            {
              $elem93 = null;
              $elem93 = new \miasrv\coupon\api\TCouponBatchInfo();
              $xfer += $elem93->read($input);
              $this->pageList []= $elem93;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TResultQueryCouponInfoList');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alert !== null) {
      $xfer += $output->writeFieldBegin('alert', TType::STRING, 3);
      $xfer += $output->writeString($this->alert);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageList !== null) {
      if (!is_array($this->pageList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pageList', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->pageList));
        {
          foreach ($this->pageList as $iter94)
          {
            $xfer += $iter94->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


