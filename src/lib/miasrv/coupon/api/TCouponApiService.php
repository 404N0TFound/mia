<?php
namespace miasrv\coupon\api;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface TCouponApiServiceIf {
  /**
   * @param \miasrv\coupon\api\TParamsQueryUserCoupon $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\api\TResultQueryUserCoupon
   */
  public function queryUserCoupon(\miasrv\coupon\api\TParamsQueryUserCoupon $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\api\TParamsBindCouponByBatchCode $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\api\TResultBindCouponByBatchCode
   */
  public function bindCouponByBatchCode(\miasrv\coupon\api\TParamsBindCouponByBatchCode $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\api\TParamsBindCouponByCode $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\api\TResultBindCouponByCode
   */
  public function bindCouponByCode(\miasrv\coupon\api\TParamsBindCouponByCode $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\api\TParamsRecoverCoupon $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\api\TResultRecoverCoupon
   */
  public function recoverCoupon(\miasrv\coupon\api\TParamsRecoverCoupon $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\api\TParamsRemainCoupon $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\api\TResultRemainCoupon
   */
  public function remainCoupon(\miasrv\coupon\api\TParamsRemainCoupon $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\api\TParamsQueryCouponDetailInfo $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\api\TResultQueryCouponDetailInfo
   */
  public function queryCouponDetailInfo(\miasrv\coupon\api\TParamsQueryCouponDetailInfo $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\api\TParamsQueryUserCouponByBatchCode $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\api\TResultQueryUserCouponByBatchCode
   */
  public function queryUserCouponByBatchCode(\miasrv\coupon\api\TParamsQueryUserCouponByBatchCode $params, \miasrv\common\CommonParams $att);
  /**
   * @param \miasrv\coupon\api\TParamsQueryCouponInfoList $params
   * @param \miasrv\common\CommonParams $att
   * @return \miasrv\coupon\api\TResultQueryCouponInfoList
   */
  public function queryCouponInfoList(\miasrv\coupon\api\TParamsQueryCouponInfoList $params, \miasrv\common\CommonParams $att);
}

class TCouponApiServiceClient implements \miasrv\coupon\api\TCouponApiServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function queryUserCoupon(\miasrv\coupon\api\TParamsQueryUserCoupon $params, \miasrv\common\CommonParams $att)
  {
    $this->send_queryUserCoupon($params, $att);
    return $this->recv_queryUserCoupon();
  }

  public function send_queryUserCoupon(\miasrv\coupon\api\TParamsQueryUserCoupon $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\api\TCouponApiService_queryUserCoupon_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryUserCoupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryUserCoupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryUserCoupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\api\TCouponApiService_queryUserCoupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\api\TCouponApiService_queryUserCoupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("queryUserCoupon failed: unknown result");
  }

  public function bindCouponByBatchCode(\miasrv\coupon\api\TParamsBindCouponByBatchCode $params, \miasrv\common\CommonParams $att)
  {
    $this->send_bindCouponByBatchCode($params, $att);
    return $this->recv_bindCouponByBatchCode();
  }

  public function send_bindCouponByBatchCode(\miasrv\coupon\api\TParamsBindCouponByBatchCode $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\api\TCouponApiService_bindCouponByBatchCode_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'bindCouponByBatchCode', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('bindCouponByBatchCode', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_bindCouponByBatchCode()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\api\TCouponApiService_bindCouponByBatchCode_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\api\TCouponApiService_bindCouponByBatchCode_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("bindCouponByBatchCode failed: unknown result");
  }

  public function bindCouponByCode(\miasrv\coupon\api\TParamsBindCouponByCode $params, \miasrv\common\CommonParams $att)
  {
    $this->send_bindCouponByCode($params, $att);
    return $this->recv_bindCouponByCode();
  }

  public function send_bindCouponByCode(\miasrv\coupon\api\TParamsBindCouponByCode $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\api\TCouponApiService_bindCouponByCode_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'bindCouponByCode', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('bindCouponByCode', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_bindCouponByCode()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\api\TCouponApiService_bindCouponByCode_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\api\TCouponApiService_bindCouponByCode_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("bindCouponByCode failed: unknown result");
  }

  public function recoverCoupon(\miasrv\coupon\api\TParamsRecoverCoupon $params, \miasrv\common\CommonParams $att)
  {
    $this->send_recoverCoupon($params, $att);
    return $this->recv_recoverCoupon();
  }

  public function send_recoverCoupon(\miasrv\coupon\api\TParamsRecoverCoupon $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\api\TCouponApiService_recoverCoupon_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'recoverCoupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('recoverCoupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_recoverCoupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\api\TCouponApiService_recoverCoupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\api\TCouponApiService_recoverCoupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("recoverCoupon failed: unknown result");
  }

  public function remainCoupon(\miasrv\coupon\api\TParamsRemainCoupon $params, \miasrv\common\CommonParams $att)
  {
    $this->send_remainCoupon($params, $att);
    return $this->recv_remainCoupon();
  }

  public function send_remainCoupon(\miasrv\coupon\api\TParamsRemainCoupon $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\api\TCouponApiService_remainCoupon_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'remainCoupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('remainCoupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_remainCoupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\api\TCouponApiService_remainCoupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\api\TCouponApiService_remainCoupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("remainCoupon failed: unknown result");
  }

  public function queryCouponDetailInfo(\miasrv\coupon\api\TParamsQueryCouponDetailInfo $params, \miasrv\common\CommonParams $att)
  {
    $this->send_queryCouponDetailInfo($params, $att);
    return $this->recv_queryCouponDetailInfo();
  }

  public function send_queryCouponDetailInfo(\miasrv\coupon\api\TParamsQueryCouponDetailInfo $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\api\TCouponApiService_queryCouponDetailInfo_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryCouponDetailInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryCouponDetailInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryCouponDetailInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\api\TCouponApiService_queryCouponDetailInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\api\TCouponApiService_queryCouponDetailInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("queryCouponDetailInfo failed: unknown result");
  }

  public function queryUserCouponByBatchCode(\miasrv\coupon\api\TParamsQueryUserCouponByBatchCode $params, \miasrv\common\CommonParams $att)
  {
    $this->send_queryUserCouponByBatchCode($params, $att);
    return $this->recv_queryUserCouponByBatchCode();
  }

  public function send_queryUserCouponByBatchCode(\miasrv\coupon\api\TParamsQueryUserCouponByBatchCode $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\api\TCouponApiService_queryUserCouponByBatchCode_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryUserCouponByBatchCode', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryUserCouponByBatchCode', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryUserCouponByBatchCode()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\api\TCouponApiService_queryUserCouponByBatchCode_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\api\TCouponApiService_queryUserCouponByBatchCode_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("queryUserCouponByBatchCode failed: unknown result");
  }

  public function queryCouponInfoList(\miasrv\coupon\api\TParamsQueryCouponInfoList $params, \miasrv\common\CommonParams $att)
  {
    $this->send_queryCouponInfoList($params, $att);
    return $this->recv_queryCouponInfoList();
  }

  public function send_queryCouponInfoList(\miasrv\coupon\api\TParamsQueryCouponInfoList $params, \miasrv\common\CommonParams $att)
  {
    $args = new \miasrv\coupon\api\TCouponApiService_queryCouponInfoList_args();
    $args->params = $params;
    $args->att = $att;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryCouponInfoList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryCouponInfoList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryCouponInfoList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\miasrv\coupon\api\TCouponApiService_queryCouponInfoList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \miasrv\coupon\api\TCouponApiService_queryCouponInfoList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("queryCouponInfoList failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class TCouponApiService_queryUserCoupon_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\api\TParamsQueryUserCoupon
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\api\TParamsQueryUserCoupon',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponApiService_queryUserCoupon_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\api\TParamsQueryUserCoupon();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponApiService_queryUserCoupon_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponApiService_queryUserCoupon_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\api\TResultQueryUserCoupon
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\api\TResultQueryUserCoupon',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponApiService_queryUserCoupon_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\api\TResultQueryUserCoupon();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponApiService_queryUserCoupon_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponApiService_bindCouponByBatchCode_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\api\TParamsBindCouponByBatchCode
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\api\TParamsBindCouponByBatchCode',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponApiService_bindCouponByBatchCode_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\api\TParamsBindCouponByBatchCode();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponApiService_bindCouponByBatchCode_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponApiService_bindCouponByBatchCode_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\api\TResultBindCouponByBatchCode
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\api\TResultBindCouponByBatchCode',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponApiService_bindCouponByBatchCode_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\api\TResultBindCouponByBatchCode();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponApiService_bindCouponByBatchCode_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponApiService_bindCouponByCode_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\api\TParamsBindCouponByCode
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\api\TParamsBindCouponByCode',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponApiService_bindCouponByCode_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\api\TParamsBindCouponByCode();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponApiService_bindCouponByCode_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponApiService_bindCouponByCode_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\api\TResultBindCouponByCode
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\api\TResultBindCouponByCode',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponApiService_bindCouponByCode_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\api\TResultBindCouponByCode();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponApiService_bindCouponByCode_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponApiService_recoverCoupon_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\api\TParamsRecoverCoupon
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\api\TParamsRecoverCoupon',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponApiService_recoverCoupon_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\api\TParamsRecoverCoupon();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponApiService_recoverCoupon_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponApiService_recoverCoupon_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\api\TResultRecoverCoupon
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\api\TResultRecoverCoupon',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponApiService_recoverCoupon_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\api\TResultRecoverCoupon();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponApiService_recoverCoupon_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponApiService_remainCoupon_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\api\TParamsRemainCoupon
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\api\TParamsRemainCoupon',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponApiService_remainCoupon_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\api\TParamsRemainCoupon();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponApiService_remainCoupon_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponApiService_remainCoupon_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\api\TResultRemainCoupon
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\api\TResultRemainCoupon',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponApiService_remainCoupon_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\api\TResultRemainCoupon();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponApiService_remainCoupon_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponApiService_queryCouponDetailInfo_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\api\TParamsQueryCouponDetailInfo
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\api\TParamsQueryCouponDetailInfo',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponApiService_queryCouponDetailInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\api\TParamsQueryCouponDetailInfo();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponApiService_queryCouponDetailInfo_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponApiService_queryCouponDetailInfo_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\api\TResultQueryCouponDetailInfo
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\api\TResultQueryCouponDetailInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponApiService_queryCouponDetailInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\api\TResultQueryCouponDetailInfo();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponApiService_queryCouponDetailInfo_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponApiService_queryUserCouponByBatchCode_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\api\TParamsQueryUserCouponByBatchCode
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\api\TParamsQueryUserCouponByBatchCode',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponApiService_queryUserCouponByBatchCode_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\api\TParamsQueryUserCouponByBatchCode();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponApiService_queryUserCouponByBatchCode_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponApiService_queryUserCouponByBatchCode_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\api\TResultQueryUserCouponByBatchCode
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\api\TResultQueryUserCouponByBatchCode',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponApiService_queryUserCouponByBatchCode_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\api\TResultQueryUserCouponByBatchCode();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponApiService_queryUserCouponByBatchCode_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponApiService_queryCouponInfoList_args {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\api\TParamsQueryCouponInfoList
   */
  public $params = null;
  /**
   * @var \miasrv\common\CommonParams
   */
  public $att = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\api\TParamsQueryCouponInfoList',
          ),
        2 => array(
          'var' => 'att',
          'type' => TType::STRUCT,
          'class' => '\miasrv\common\CommonParams',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['att'])) {
        $this->att = $vals['att'];
      }
    }
  }

  public function getName() {
    return 'TCouponApiService_queryCouponInfoList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->params = new \miasrv\coupon\api\TParamsQueryCouponInfoList();
            $xfer += $this->params->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->att = new \miasrv\common\CommonParams();
            $xfer += $this->att->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponApiService_queryCouponInfoList_args');
    if ($this->params !== null) {
      if (!is_object($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::STRUCT, 1);
      $xfer += $this->params->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->att !== null) {
      if (!is_object($this->att)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('att', TType::STRUCT, 2);
      $xfer += $this->att->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCouponApiService_queryCouponInfoList_result {
  static $_TSPEC;

  /**
   * @var \miasrv\coupon\api\TResultQueryCouponInfoList
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\miasrv\coupon\api\TResultQueryCouponInfoList',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TCouponApiService_queryCouponInfoList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \miasrv\coupon\api\TResultQueryCouponInfoList();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCouponApiService_queryCouponInfoList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


